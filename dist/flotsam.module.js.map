{"version":3,"file":"flotsam.module.js","sources":["../src/DispatcherEvent.js","../src/index.js","../src/EventComponent.js"],"sourcesContent":["// helper class to run event busing\nclass DispatcherEvent {\n    constructor(eventName) {\n        this.eventName = eventName\n        this.callbacks = []\n    }\n\n    registerCallback(callback) {\n        this.callbacks.push(callback)\n    }\n\n    unregisterCallback(callback) {\n        const index = this.callbacks.indexOf(callback)\n        if (index > -1) {\n            this.callbacks.splice(index, 1)\n        }\n    }\n\n    fire(data) {\n        const callbacks = this.callbacks.slice(0)\n        callbacks.forEach((callback) => {\n            callback(data)\n        })\n    }\n}\n\nexport default DispatcherEvent\n","import EventComponent from './EventComponent'\nimport './styles.css'\n\nconst OPEN_CLASS = 'is-open'\n\nclass flotsam extends EventComponent {\n    ////////////////////////////////////////////////////\n    // construct\n    ////////////////////////////////////////////////////\n    constructor(options) {\n        // class inheritance setup\n        // adding core events module\n        super()\n\n        // for debugging\n        this.options = options\n\n        this.$input = options.el\n        this.data = options.data ? options.data : false\n        this.minChars = options.minChars ? options.minChars : 2\n        this.inputPreview = options.inputPreview ? options.inputPreview : true\n        this.onAjax = options.onAjax\n\n        this.hint = options.hint\n            ? options.hint\n            : 'When autocomplete results are available use up and down arrows to review and enter to select.'\n\n        this.isEmpty = true\n        this.hasEmptyState = true\n\n        // native state\n        this.isOpen = false\n\n        this.init()\n    }\n\n    ////////////////////////////////////////////////////\n    // inits\n    ////////////////////////////////////////////////////\n\n    // setup has some housekeeping of inputs and attrs to increase quality of life\n    setUp() {\n        // add autocomplete off to input to not get in the way of dropdown\n        this.$input.setAttribute('autocomplete', 'off')\n        this.$input.setAttribute('aria-expanded', 'false')\n        this.$input.setAttribute('aria-haspopup', 'listbox')\n        this.$input.setAttribute('role', 'combobox')\n        this.$input.setAttribute('aria-autocomplete', 'list')\n        this.$input.setAttribute('aria-owns', `modal-${this.uid}-list`)\n        this.$input.id = `autocomplete-input-${this.uid}`\n        this.$input.setAttribute(\n            'aria-describedby',\n            `assistiveHint-${this.uid}`\n        )\n    }\n\n    initModal() {\n        // append modal to the page\n        this.$input.insertAdjacentHTML('afterend', this.generateModal())\n        this.$input.insertAdjacentHTML('afterend', this.generateAssistiveHint())\n        this.$input.insertAdjacentHTML('afterend', this.generateStatus())\n\n        // grab an instance of elems to use later\n        this.$modal = document.querySelector(`#modal-${this.uid}`)\n        this.$status = document.querySelector(`#status-${this.uid}`)\n        this.list = this.$modal.querySelector('.autocomplete-modal__list')\n        this.$empty = this.$modal.querySelector('.autocomplete-modal__empty')\n\n        // intial modal styles\n        this.$modal.style.pointerEvents = 'none'\n        this.$modal.style.visibility = 'hidden'\n    }\n\n    initInputCheck() {\n        if (this.isDisabled) return\n\n        // if we want to use ajax we build a promise to get data\n        if (this.onAjax) {\n            this.$input.addEventListener('input', (e) => {\n                this.value = e.target.value\n\n                if (this.minCharsExcceded()) {\n                    super.dispatch('loadingData', {\n                        input: this.$input,\n                        modal: this.$modal,\n                        flotsam: this,\n                        options: this.options,\n                    })\n                    this.onAjax(this.value).then((result) => {\n                        this.data = result\n\n                        super.dispatch('loadedData', {\n                            input: this.$input,\n                            modal: this.$modal,\n                            flotsam: this,\n                            options: this.options,\n                        })\n\n                        this.update()\n                    })\n                } else if (this.isOpen) {\n                    this.closeModal()\n                }\n            })\n        } else {\n            // else if we have static data lets just use that\n            this.$input.addEventListener('input', (e) => {\n                this.value = e.target.value\n                if (this.minCharsExcceded()) {\n                    this.update()\n                } else if (this.isOpen) {\n                    this.closeModal()\n                }\n            })\n        }\n    }\n\n    ////////////////////////////////////////////////////\n    // init assisitve hint\n    ////////////////////////////////////////////////////\n\n    generateAssistiveHint() {\n        return `\n            <div id=\"assistiveHint-${this.uid}\" style=\"display: none\">\n                ${this.hint}\n            </div>\n        `\n    }\n\n    generateStatus() {\n        return `\n            <div id=\"status-${this.uid}\" aria-role='status' aria-live=\"polite\" style=\"display: none\">\n                \n            </div>\n        `\n    }\n\n    update() {\n        // filter the data\n        if (this.data.length !== 0) {\n            this.data = this.data.filter((item) => {\n                if (item.toLowerCase().includes(this.value.toLowerCase())) {\n                    return item\n                }\n            })\n        }\n\n        if (this.data.length === 0) {\n            this.showEmptyState()\n        } else {\n            // we have items remove the empty state\n            this.hideEmptyState()\n            this.generateListItems()\n\n            // this only triggers once then sets the modal to open state\n            if (this.isOpen === false) {\n                this.openModal()\n            }\n        }\n    }\n\n    preventSubmit(e) {\n        e.preventDefault()\n    }\n\n    showEmptyState() {\n        this.removeListItems()\n        const emptyHtml = `<div>Sorry there are no results for <strong>\"${this.value}\"</strong> please search again</div>`\n        this.$empty.innerHTML = emptyHtml\n        this.$empty.style.display = 'block'\n\n        if (!this.isOpen) {\n            this.openModal()\n        }\n    }\n\n    hideEmptyState() {\n        this.$empty.innerHTML = ''\n        this.$empty.style.display = 'none'\n    }\n\n    ////////////////////////////////////////////////////\n    // hide and show modal\n    // bread and butter functions all event setup\n    // and breakdown here\n    ////////////////////////////////////////////////////\n    openModal() {\n        if (this.isDisabled) return\n\n        document.addEventListener('submit', this.preventSubmit)\n\n        // this way lets us cleanly breakdown this event listener later\n        this.checkKey = this.checkKey.bind(this)\n        document.addEventListener('keydown', this.checkKey, true)\n        this.isOpen = true\n\n        // styles and classes\n        this.$modal.style.pointerEvents = 'auto'\n        this.$modal.style.visibility = 'visible'\n        this.$input.classList.add(OPEN_CLASS)\n        this.$input.setAttribute('aria-expanded', 'true')\n\n        super.dispatch('openModal', {\n            input: this.$input,\n            modal: this.$modal,\n            flotsam: this,\n            options: this.options,\n        })\n    }\n\n    closeModal() {\n        // clean up the modal containers\n        this.hideEmptyState()\n        this.removeListItems()\n        this.unsetSelected()\n\n        if (this.isOpen) {\n            document.removeEventListener('submit', this.preventSubmit)\n            document.removeEventListener('keydown', this.checkKey, true)\n        }\n\n        this.$modal.style.pointerEvents = 'none'\n        this.$modal.style.visibility = 'hidden'\n        this.$input.classList.remove(OPEN_CLASS)\n        this.$input.focus()\n\n        this.isOpen = false\n\n        super.dispatch('closeModal', {\n            input: this.$input,\n            modal: this.$modal,\n            flotsam: this,\n            options: this.options,\n        })\n    }\n    ////////////////////////////////////////////////////\n    // key event checker - the key event triggers\n    ////////////////////////////////////////////////////\n\n    checkKey(e) {\n        if (e.keyCode == '38') {\n            // up arrowspot\n            this.selectPrev()\n        } else if (e.keyCode == '40') {\n            // down arrow\n            this.selectNext()\n        } else if (e.keyCode == '37') {\n            // left arrow\n        } else if (e.keyCode == '39') {\n            // right arrow\n        } else if (e.keyCode == '27') {\n            // escape\n            e.preventDefault()\n            this.closeModal()\n        } else if (e.keyCode == '9') {\n            // tab\n            e.preventDefault()\n            this.closeModal()\n        } else if (e.keyCode == '13') {\n            // enter\n            e.preventDefault()\n            this.closeModal()\n            this.$input.closest('form').submit()\n        }\n    }\n\n    ////////////////////////////////////////////////////\n    // visual selection of the items on the modal\n    ////////////////////////////////////////////////////\n    selectItem() {\n        const items = [...this.list.querySelectorAll('li')]\n        items.forEach((item, index) => {\n            if (index === this.currentSelected) {\n                item.classList.add('selected-item')\n\n                // a11y features\n                item.setAttribute('aria-selected', 'true')\n                console.log(item.id)\n                console.log(item)\n                this.$input.setAttribute('aria-activedescendant', item.id)\n\n                // if prevew is on show the selected in the input box\n                if (this.inputPreview) {\n                    this.setInput(item.innerText)\n                }\n\n                // !!EVENT!! on select key\n                super.dispatch('selectKey', {\n                    selected: item.textContent,\n                    input: this.$input,\n                    modal: this.$modal,\n                    flotsam: this,\n                    options: this.options,\n                })\n            } else {\n                item.classList.remove('selected-item')\n                item.setAttribute('aria-selected', 'false')\n            }\n        })\n    }\n\n    selectNext() {\n        if (this.currentSelected === null) {\n            this.currentSelected = 0\n        } else {\n            this.currentSelected = this.currentSelected + 1\n        }\n\n        this.selectItem()\n    }\n\n    selectPrev() {\n        this.currentSelected = this.currentSelected - 1\n        this.selectItem()\n    }\n\n    unsetSelected() {\n        // unset selected\n        this.currentSelected = null\n        const items = [...this.list.querySelectorAll('li')]\n\n        // a11y feature\n        this.$input.removeAttribute('aria-activedescendant')\n\n        items.forEach((item) => {\n            item.classList.remove('selected-item')\n        })\n    }\n\n    generateModal() {\n        console.log(this.uid)\n        return `\n        <div class=\"autocomplete-modal\" id=\"modal-${this.uid}\" >\n            <div class=\"autocomplete-modal__inner\">\n                <ul \n                    class=\"autocomplete-modal__list\" \n                    role=\"listbox\" \n                    id=\"modal-${this.uid}-list\">\n                </ul>\n                <div class=\"autocomplete-modal__empty\" style=\"display: none\"></div>\n            </div>\n        </div>\n    `\n    }\n\n    generateListItems() {\n        // clean up the dropdown of selects\n        this.unsetSelected()\n\n        let list = ``\n\n        this.data.forEach((item, index) => {\n            const regex = new RegExp(this.value, 'gi')\n            const response = item.replace(regex, (str) => {\n                return (\n                    `<span class=\"autocomplete-modal__list-highlight\">` +\n                    str +\n                    '</span>'\n                )\n            })\n            const posIndex = index + 1\n            list += `\n                <li class=\"autocomplete-modal__list-item\" role=\"option\" aria-posinset=\"${posIndex}\" aria-setsize=\"${this.data.length}\" aria-selected=\"false\" id=\"list-item-${index}--${this.uid}\" tab-index=\"-1\">\n                    ${response}\n                </li>`\n        })\n\n        // append list to the screen\n        this.list.innerHTML = list\n\n        // now that list is on DOM add event listeners\n        const listItems = [...this.list.querySelectorAll('li')]\n        listItems.forEach((item) => {\n            item.addEventListener('click', () => {\n                this.setInput(item.innerText)\n                this.closeModal()\n            })\n        })\n    }\n\n    // quick way to breka down list\n    removeListItems() {\n        this.list.innerHTML = ''\n    }\n\n    ////////////////////////////////////////////////////\n    // visually set input value (optionally triggered)\n    ////////////////////////////////////////////////////\n    setInput(textValue) {\n        this.$input.value = textValue\n    }\n\n    ////////////////////////////////////////////////////\n    // public triggers - USERS SHOULD ONLY USE THESE\n    ////////////////////////////////////////////////////\n    triggerClose() {\n        this.closeModal()\n    }\n\n    triggerDisable() {\n        this.isDisabled = true\n        this.closeModal()\n        super.dispatch('disabled', {\n            input: this.$input,\n            modal: this.$modal,\n            flotsam: this,\n            options: this.options,\n        })\n    }\n\n    triggerEnable() {\n        this.isDisabled = false\n    }\n\n    ////////////////////////////////////////////////////\n    // utils\n    ////////////////////////////////////////////////////\n    minCharsExcceded() {\n        if (this.value.length >= this.minChars) {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    ////////////////////////////////////////////////////\n    // init fn - run on singleton creation\n    ////////////////////////////////////////////////////\n    init() {\n        this._self = this // so we can remove event listeners cleanly\n\n        // state\n        this.currentSelected = null\n        this.isDisabled = false\n\n        this.setUp()\n        // inject the modal onto the page and get an instance of it\n        this.initModal()\n\n        // add listener to onInput of input\n        this.initInputCheck()\n\n        console.log(this.uid)\n\n        // bug not triggering right away, so set it to next cycle\n        setTimeout(() => {\n            super.dispatch('init', {\n                input: this.$input,\n                modal: this.$modal,\n                flotsam: this,\n                options: this.options,\n            })\n        }, 0)\n    }\n}\n\nexport default flotsam\n","import DispatcherEvent from './DispatcherEvent'\n\nclass EventComponent {\n    ////////////////////////////////////////////////////\n    // construct\n    ////////////////////////////////////////////////////\n    constructor() {\n        this.events = {}\n        this.uid = Math.floor(1000 + Math.random() * 90000)\n    }\n\n    ////////////////////////////////////////////////////\n    // event trigger and listeners\n    ////////////////////////////////////////////////////\n    dispatch(eventName, data) {\n        const event = this.events[eventName]\n        if (event) {\n            event.fire(data)\n        }\n    }\n\n    on(eventName, callback) {\n        let event = this.events[eventName]\n        if (!event) {\n            event = new DispatcherEvent(eventName)\n            this.events[eventName] = event\n        }\n        event.registerCallback(callback)\n    }\n\n    off(eventName, callback) {\n        const event = this.events[eventName]\n        if (event && event.callbacks.indexOf(callback) > -1) {\n            event.unregisterCallback(callback)\n            if (event.callbacks.length === 0) {\n                delete this.events[eventName]\n            }\n        }\n    }\n}\n\nexport default EventComponent\n"],"names":["DispatcherEvent","eventName","this","callbacks","_proto","prototype","registerCallback","callback","push","unregisterCallback","index","indexOf","splice","fire","data","slice","forEach","OPEN_CLASS","flotsam","_EventComponent","options","_this","$input","el","minChars","inputPreview","onAjax","hint","isEmpty","hasEmptyState","isOpen","init","setUp","EventComponent","setAttribute","uid","id","initModal","insertAdjacentHTML","generateModal","generateAssistiveHint","generateStatus","$modal","document","querySelector","$status","list","$empty","style","pointerEvents","visibility","initInputCheck","_this2","isDisabled","addEventListener","e","value","target","minCharsExcceded","dispatch","call","input","modal","then","result","update","closeModal","_this3","length","filter","item","toLowerCase","includes","showEmptyState","hideEmptyState","generateListItems","openModal","preventSubmit","preventDefault","removeListItems","innerHTML","display","checkKey","bind","classList","add","unsetSelected","removeEventListener","remove","focus","keyCode","selectPrev","selectNext","closest","submit","selectItem","_this4","querySelectorAll","currentSelected","console","log","setInput","innerText","selected","textContent","items","removeAttribute","_this5","regex","RegExp","response","replace","str","posIndex","concat","textValue","triggerClose","triggerDisable","triggerEnable","_this6","_self","setTimeout","events","Math","floor","random","event","on","off"],"mappings":"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"}