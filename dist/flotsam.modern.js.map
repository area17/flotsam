{"version":3,"file":"flotsam.modern.js","sources":["../src/DispatcherEvent.js","../src/EventComponent.js","../src/index.js"],"sourcesContent":["// helper class to run event busing\nclass DispatcherEvent {\n    constructor(eventName) {\n        this.eventName = eventName\n        this.callbacks = []\n    }\n\n    registerCallback(callback) {\n        this.callbacks.push(callback)\n    }\n\n    unregisterCallback(callback) {\n        const index = this.callbacks.indexOf(callback)\n        if (index > -1) {\n            this.callbacks.splice(index, 1)\n        }\n    }\n\n    fire(data) {\n        const callbacks = this.callbacks.slice(0)\n        callbacks.forEach((callback) => {\n            callback(data)\n        })\n    }\n}\n\nexport default DispatcherEvent\n","import DispatcherEvent from './DispatcherEvent'\n\nclass EventComponent {\n    ////////////////////////////////////////////////////\n    // construct\n    ////////////////////////////////////////////////////\n    constructor() {\n        this.events = {}\n        this.uid = Math.floor(1000 + Math.random() * 90000)\n    }\n\n    ////////////////////////////////////////////////////\n    // event trigger and listeners\n    ////////////////////////////////////////////////////\n    dispatch(eventName, data) {\n        const event = this.events[eventName]\n        if (event) {\n            event.fire(data)\n        }\n    }\n\n    on(eventName, callback) {\n        let event = this.events[eventName]\n        if (!event) {\n            event = new DispatcherEvent(eventName)\n            this.events[eventName] = event\n        }\n        event.registerCallback(callback)\n    }\n\n    off(eventName, callback) {\n        const event = this.events[eventName]\n        if (event && event.callbacks.indexOf(callback) > -1) {\n            event.unregisterCallback(callback)\n            if (event.callbacks.length === 0) {\n                delete this.events[eventName]\n            }\n        }\n    }\n}\n\nexport default EventComponent\n","import EventComponent from './EventComponent'\n\nconst OPEN_CLASS = 'flotsam-modal--is-open'\n\n// defaults\nconst hintDefault = `When autocomplete results are available, use up and down arrows to review and enter to select. Touch device users, explore by touch or with swipe gestures.`\nconst emptyDefault = `Sorry there are no results for ::term:: please search again.`\n\nclass flotsam extends EventComponent {\n    ////////////////////////////////////////////////////\n    // construct\n    ////////////////////////////////////////////////////\n    constructor(options) {\n        // class inheritance setup\n        // adding core events module\n        super()\n\n        // for debugging view the options\n        this.options = options\n\n        // el reference\n        this.$input = options.el\n\n        // static data array\n        this.data = options.data ? options.data : null\n\n        // minimum characters required to use ajax/show autocomplete\n        this.minChars = options.minChars ? options.minChars : 2\n\n        // interaction of setting input value on arrow key\n        this.inputPreview =\n            typeof options.inputPreview === 'boolean'\n                ? options.inputPreview\n                : true\n\n        // promise style fn to get data\n        this.getData =\n            typeof options.getData === 'function' ? options.getData : null\n\n        // to add span attributes around string value of selected chars\n        this.markResults =\n            typeof options.markResults === 'boolean'\n                ? options.markResults\n                : true\n\n        // disable the instant submission on pressing enter to select listbox value\n        this.submitOnReturn =\n            typeof options.submitOnReturn === 'boolean'\n                ? options.submitOnReturn\n                : true\n\n        // description of autocomplete functionality\n        this.hint = options.hint ? options.hint : hintDefault\n\n        // empty state visual content\n        this.noResultsText = options.noResultsText\n            ? options.noResultsText\n            : emptyDefault\n\n        // modal can have an empty state (currently only true)\n        this.hasEmptyState = true\n\n        // native flotsom state\n        this.filteredData = []\n        this.isOpen = false\n        this.currentSelected = null\n        this.isDisabled = false\n\n        // init the project!\n        this.init()\n    }\n\n    ////////////////////////////////////////////////////\n    // inits\n    ////////////////////////////////////////////////////\n\n    // setup has some housekeeping of inputs and attrs to increase quality of life\n    setUp() {\n        // add autocomplete off to input to not get in the way of dropdown\n        this.$input.setAttribute('autocomplete', 'off')\n        this.$input.setAttribute('aria-expanded', 'false')\n        this.$input.setAttribute('aria-haspopup', 'listbox')\n        this.$input.setAttribute('role', 'combobox')\n        this.$input.setAttribute('aria-autocomplete', 'list')\n        this.$input.setAttribute('aria-owns', `modal-${this.uid}-list`)\n        this.$input.id = `flotsam-input-${this.uid}`\n        this.$input.setAttribute(\n            'aria-describedby',\n            `assistiveHint-${this.uid}`\n        )\n    }\n\n    initModal() {\n        // append modal to the page\n        this.$input.insertAdjacentHTML('afterend', this.generateModal())\n        this.$input.insertAdjacentHTML('afterend', this.generateAssistiveHint())\n        this.$input.insertAdjacentHTML('afterend', this.generateStatus())\n\n        // grab an instance of elems to use later\n        this.$modal = document.querySelector(`#modal-${this.uid}`)\n        this.$status = document.querySelector(`#status-${this.uid}`)\n\n        setTimeout(() => {\n            this.list = this.$modal.querySelector('.flotsam-modal__list')\n            this.$empty = this.$modal.querySelector('.flotsam-modal__empty')\n            // intial modal styles\n            this.$modal.style.pointerEvents = 'none'\n            this.$modal.style.visibility = 'hidden'\n        }, 0)\n    }\n\n    initInputCheck() {\n        if (this.isDisabled) return\n\n        // if we want to use ajax (or some other method of returning a promise) we build a promise to get data\n        if (this.getData) {\n            this.$input.addEventListener('input', (e) => {\n                this.value = e.target.value\n\n                if (this.minCharsExcceded()) {\n                    super.dispatch('loadingData', {\n                        input: this.$input,\n                        modal: this.$modal,\n                    })\n\n                    this.getData(this.value).then((result) => {\n                        this.filteredData = result\n\n                        super.dispatch('loadedData', {\n                            input: this.$input,\n                            modal: this.$modal,\n                        })\n\n                        this.update(true)\n                    })\n                } else if (this.isOpen) {\n                    this.closeModal()\n                }\n            })\n        } else {\n            // else if we have static data lets just use that\n            this.$input.addEventListener('input', (e) => {\n                this.value = e.target.value\n                if (this.minCharsExcceded()) {\n                    this.update(false)\n                } else if (this.isOpen) {\n                    this.closeModal()\n                }\n            })\n        }\n    }\n\n    ////////////////////////////////////////////////////\n    // init assisitve hint\n    ////////////////////////////////////////////////////\n\n    generateAssistiveHint() {\n        return `\n            <div id=\"assistiveHint-${this.uid}\" class=\"flotsam-modal__hint\">\n                ${this.hint}\n            </div>\n        `\n    }\n\n    generateStatus() {\n        return `\n            <div id=\"status-${this.uid}\" aria-role='status' aria-live=\"polite\" class=\"flotsam-modal__status\">\n            </div>\n        `\n    }\n\n    update(dynamic) {\n        if (!dynamic) {\n            // filter the data\n            if (this.data && this.data.length !== 0) {\n                this.filteredData = [...this.data].filter((item) => {\n                    if (item.toLowerCase().includes(this.value.toLowerCase())) {\n                        return item\n                    }\n                })\n            } else {\n                this.filteredData = []\n            }\n        }\n\n        if (this.filteredData.length === 0) {\n            this.showEmptyState()\n        } else {\n            // we have items remove the empty state\n            this.hideEmptyState()\n            this.generateListItems()\n\n            // this only triggers once then sets the modal to open state\n            if (this.isOpen === false) {\n                this.openModal()\n            }\n        }\n    }\n\n    preventSubmit(e) {\n        e.preventDefault()\n    }\n\n    showEmptyState() {\n        this.removeListItems()\n\n        // replace fn for ::term:: in empty string with value\n        const str = this.noResultsText.replace(\n            '::term::',\n            `<strong>\"${this.value}\"</strong>`\n        )\n        const emptyHtml = `<div>${str}</div>`\n        this.$empty.innerHTML = emptyHtml\n        this.$empty.style.display = 'block'\n\n        if (!this.isOpen) {\n            this.openModal()\n        }\n    }\n\n    hideEmptyState() {\n        this.$empty.innerHTML = ''\n        this.$empty.style.display = 'none'\n    }\n\n    ////////////////////////////////////////////////////\n    // hide and show modal\n    // bread and butter functions all event setup\n    // and breakdown here\n    ////////////////////////////////////////////////////\n    openModal() {\n        if (this.isDisabled) return\n\n        document.addEventListener('submit', this.preventSubmit)\n\n        // this way lets us cleanly breakdown this event listener later\n        this.checkKey = this.checkKey.bind(this)\n        document.addEventListener('keydown', this.checkKey, true)\n        this.isOpen = true\n\n        // styles and classes\n        this.$modal.style.pointerEvents = 'auto'\n        this.$modal.style.visibility = 'visible'\n        this.$input.classList.add(OPEN_CLASS)\n        this.$input.setAttribute('aria-expanded', 'true')\n\n        super.dispatch('openModal', {\n            input: this.$input,\n            modal: this.$modal,\n        })\n    }\n\n    closeModal() {\n        // clean up the modal containers\n        this.hideEmptyState()\n        this.removeListItems()\n        this.unsetSelected()\n\n        if (this.isOpen) {\n            document.removeEventListener('submit', this.preventSubmit)\n            document.removeEventListener('keydown', this.checkKey, true)\n        }\n\n        this.$modal.style.pointerEvents = 'none'\n        this.$modal.style.visibility = 'hidden'\n        this.$input.classList.remove(OPEN_CLASS)\n        this.$input.focus()\n\n        this.isOpen = false\n\n        super.dispatch('closeModal', {\n            input: this.$input,\n            modal: this.$modal,\n        })\n    }\n    ////////////////////////////////////////////////////\n    // key event checker - the key event triggers\n    ////////////////////////////////////////////////////\n\n    checkKey(e) {\n        if (e.keyCode == '38') {\n            // up arrowspot\n            this.selectPrev()\n        } else if (e.keyCode == '40') {\n            // down arrow\n            this.selectNext()\n        } else if (e.keyCode == '37') {\n            // left arrow\n        } else if (e.keyCode == '39') {\n            // right arrow\n        } else if (e.keyCode == '27') {\n            // escape\n            e.preventDefault()\n            this.closeModal()\n        } else if (e.keyCode == '9') {\n            // tab\n            e.preventDefault()\n            this.closeModal()\n        } else if (e.keyCode == '13') {\n            // enter\n            e.preventDefault()\n            this.resultClicked(this.currentSelected)\n            this.closeModal()\n            if (this.submitOnReturn) {\n                this.$input.closest('form').submit()\n            }\n        }\n    }\n\n    ////////////////////////////////////////////////////\n    // visual selection of the items on the modal\n    ////////////////////////////////////////////////////\n    selectItem() {\n        const items = [...this.list.querySelectorAll('li')]\n        items.forEach((item, index) => {\n            if (index === this.currentSelected) {\n                item.classList.add('flotsam-modal__selected-item')\n\n                // a11y features\n                item.setAttribute('aria-selected', 'true')\n                this.$input.setAttribute('aria-activedescendant', item.id)\n\n                // if prevew is on show the selected in the input box\n                if (this.inputPreview) {\n                    this.setInput(item.innerText)\n                }\n\n                // !!EVENT!! on select key\n                super.dispatch('selectKey', {\n                    selected: item.textContent.trim(),\n                    value: this.value,\n                    input: this.$input,\n                    modal: this.$modal,\n                })\n            } else {\n                item.classList.remove('flotsam-modal__selected-item')\n                item.setAttribute('aria-selected', 'false')\n            }\n        })\n    }\n\n    selectNext() {\n        if (this.currentSelected === null) {\n            this.currentSelected = 0\n        } else {\n            this.currentSelected = this.currentSelected + 1\n        }\n\n        this.selectItem()\n    }\n\n    selectPrev() {\n        this.currentSelected = this.currentSelected - 1\n        this.selectItem()\n    }\n\n    unsetSelected() {\n        // unset selected\n        this.currentSelected = null\n        const items = [...this.list.querySelectorAll('li')]\n\n        // a11y feature\n        this.$input.removeAttribute('aria-activedescendant')\n\n        items.forEach((item) => {\n            item.classList.remove('flotsam-modal__selected-item')\n        })\n    }\n\n    generateModal() {\n        console.log('gene modal')\n        return `\n        <div class=\"flotsam-modal\" id=\"modal-${this.uid}\" >\n            <div class=\"flotsam-modal__inner\">\n                <ul\n                    class=\"flotsam-modal__list\"\n                    role=\"listbox\"\n                    id=\"modal-${this.uid}-list\">\n                </ul>\n                <div class=\"flotsam-modal__empty\" style=\"display: none\"></div>\n            </div>\n        </div>\n    `\n    }\n\n    generateListItems() {\n        // clean up the dropdown of selects\n        this.unsetSelected()\n\n        let list = ``\n\n        this.filteredData.forEach((item, index) => {\n            let response = item\n            if (this.markResults) {\n                const regex = new RegExp(this.value, 'gi')\n                response = item.replace(regex, (str) => {\n                    return `<mark>` + str + '</mark>'\n                })\n            }\n            const posIndex = index + 1\n            list += `\n                <li class=\"flotsam-modal__list-item\" role=\"option\" aria-posinset=\"${posIndex}\" aria-setsize=\"${this.filteredData.length}\" aria-selected=\"false\" id=\"list-item-${index}--${this.uid}\" tab-index=\"-1\">\n                    ${response}\n                </li>`\n        })\n\n        // append list to the screen\n        this.list.innerHTML = list\n\n        // now that list is on DOM add event listeners\n        const listItems = [...this.list.querySelectorAll('li')]\n        listItems.forEach((item, index) => {\n            item.addEventListener('click', () => {\n                this.resultClicked(index)\n                this.closeModal()\n            })\n        })\n    }\n\n    // quick way to break down list\n    removeListItems() {\n        this.list.innerHTML = ''\n    }\n\n    ////////////////////////////////////////////////////\n    // result clicked\n    ////////////////////////////////////////////////////\n    resultClicked(index) {\n        if (index) {\n            const item = this.list.querySelectorAll('li')[index]\n            if (item) {\n                super.dispatch('resultClicked', {\n                    selected: item.textContent.trim(),\n                    value: this.value,\n                    input: this.$input,\n                    modal: this.$modal,\n                })\n                this.setInput(item.innerText)\n            }\n        }\n    }\n\n    ////////////////////////////////////////////////////\n    // visually set input value (optionally triggered)\n    ////////////////////////////////////////////////////\n    setInput(textValue) {\n        this.$input.value = textValue\n    }\n\n    ////////////////////////////////////////////////////\n    // public triggers - USERS SHOULD ONLY USE THESE\n    ////////////////////////////////////////////////////\n    triggerClose() {\n        this.closeModal()\n    }\n\n    triggerDisable() {\n        this.isDisabled = true\n        this.closeModal()\n        super.dispatch('disabled', {\n            input: this.$input,\n            modal: this.$modal,\n        })\n    }\n\n    triggerEnable() {\n        this.isDisabled = false\n    }\n\n    ////////////////////////////////////////////////////\n    // utils\n    ////////////////////////////////////////////////////\n    minCharsExcceded() {\n        if (this.value.length >= this.minChars) {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    ////////////////////////////////////////////////////\n    // init fn - run on singleton creation\n    ////////////////////////////////////////////////////\n    init() {\n        if (!this.data && !this.getData) {\n            this.isDisabled = true\n            console.error('flotsam: no data specified', this)\n            return\n        }\n\n        this.setUp()\n\n        // inject the modal onto the page and get an instance of it\n        this.initModal()\n\n        // add listener to onInput of input\n        this.initInputCheck()\n\n        // bug not triggering right away, so set it to next cycle\n        setTimeout(() => {\n            super.dispatch('init', {\n                input: this.$input,\n                modal: this.$modal,\n            })\n        }, 0)\n    }\n}\n\nexport default flotsam\n"],"names":["DispatcherEvent","constructor","eventName","this","callbacks","registerCallback","callback","push","unregisterCallback","index","indexOf","splice","fire","data","slice","forEach","EventComponent","events","uid","Math","floor","random","dispatch","event","on","off","length","OPEN_CLASS","flotsam","options","super","$input","el","minChars","inputPreview","getData","markResults","submitOnReturn","hint","noResultsText","hasEmptyState","filteredData","isOpen","currentSelected","isDisabled","init","setUp","setAttribute","id","initModal","insertAdjacentHTML","generateModal","generateAssistiveHint","generateStatus","$modal","document","querySelector","$status","setTimeout","list","$empty","style","pointerEvents","visibility","initInputCheck","addEventListener","e","value","target","minCharsExcceded","input","modal","then","result","update","closeModal","dynamic","filter","item","toLowerCase","includes","showEmptyState","hideEmptyState","generateListItems","openModal","preventSubmit","preventDefault","removeListItems","replace","innerHTML","str","display","checkKey","bind","classList","add","unsetSelected","removeEventListener","remove","focus","keyCode","selectPrev","selectNext","resultClicked","closest","submit","selectItem","querySelectorAll","setInput","innerText","selected","textContent","trim","removeAttribute","items","console","log","response","regex","textValue","triggerClose","triggerDisable","triggerEnable","error"],"mappings":"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"}