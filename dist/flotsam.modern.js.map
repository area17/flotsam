{"version":3,"file":"flotsam.modern.js","sources":["../src/DispatcherEvent.js","../src/EventComponent.js","../src/index.js"],"sourcesContent":["// helper class to run event busing\nclass DispatcherEvent {\n    constructor(eventName) {\n        this.eventName = eventName\n        this.callbacks = []\n    }\n\n    registerCallback(callback) {\n        this.callbacks.push(callback)\n    }\n\n    unregisterCallback(callback) {\n        const index = this.callbacks.indexOf(callback)\n        if (index > -1) {\n            this.callbacks.splice(index, 1)\n        }\n    }\n\n    fire(data) {\n        const callbacks = this.callbacks.slice(0)\n        callbacks.forEach((callback) => {\n            callback(data)\n        })\n    }\n}\n\nexport default DispatcherEvent\n","import DispatcherEvent from './DispatcherEvent'\n\nclass EventComponent {\n    ////////////////////////////////////////////////////\n    // construct\n    ////////////////////////////////////////////////////\n    constructor() {\n        this.events = {}\n        this.uid = Math.floor(1000 + Math.random() * 90000)\n    }\n\n    ////////////////////////////////////////////////////\n    // event trigger and listeners\n    ////////////////////////////////////////////////////\n    dispatch(eventName, data) {\n        const event = this.events[eventName]\n        if (event) {\n            event.fire(data)\n        }\n    }\n\n    on(eventName, callback) {\n        let event = this.events[eventName]\n        if (!event) {\n            event = new DispatcherEvent(eventName)\n            this.events[eventName] = event\n        }\n        event.registerCallback(callback)\n    }\n\n    off(eventName, callback) {\n        const event = this.events[eventName]\n        if (event && event.callbacks.indexOf(callback) > -1) {\n            event.unregisterCallback(callback)\n            if (event.callbacks.length === 0) {\n                delete this.events[eventName]\n            }\n        }\n    }\n}\n\nexport default EventComponent\n","import EventComponent from './EventComponent'\nimport './styles.css'\n\nconst OPEN_CLASS = 'is-open'\n\nclass flotsam extends EventComponent {\n    ////////////////////////////////////////////////////\n    // construct\n    ////////////////////////////////////////////////////\n    constructor(options) {\n        // class inheritance setup\n        // adding core events module\n        super()\n\n        // for debugging\n        this.options = options\n\n        this.$input = options.el\n        this.data = options.data ? options.data : false\n        this.minChars = options.minChars ? options.minChars : 2\n        this.inputPreview = options.inputPreview ? options.inputPreview : true\n        this.onAjax = options.onAjax\n\n        this.isEmpty = true\n        this.hasEmptyState = true\n\n        // native state\n        this.isOpen = false\n\n        this.init()\n    }\n\n    ////////////////////////////////////////////////////\n    // inits\n    ////////////////////////////////////////////////////\n\n    // setup has some housekeeping of inputs and attrs to increase quality of life\n    setUp() {\n        // add autocomplete off to input to not get in the way of dropdown\n        this.$input.setAttribute('autocomplete', 'off')\n        this.$input.setAttribute('aira-expanded', 'false')\n        this.$input.setAttribute('aira-haspopup', 'listbox')\n        this.$input.setAttribute('role', 'combobox')\n        this.$input.setAttribute('aira-autocomplete', 'list')\n        this.$input.setAttribute('aira-owns', `modal-${super.uid}-list`)\n        this.$input.id = `autocomplete-input-${super.uid}`\n    }\n\n    initModal() {\n        // append modal to the page\n        this.$input.insertAdjacentHTML('afterend', this.generateModal())\n\n        // grab an instance of elems to use later\n        this.$modal = document.querySelector(`#modal-${super.uid}`)\n        this.list = this.$modal.querySelector('.autocomplete-modal__list')\n        this.$empty = this.$modal.querySelector('.autocomplete-modal__empty')\n\n        // intial modal styles\n        this.$modal.style.pointerEvents = 'none'\n        this.$modal.style.visibility = 'hidden'\n    }\n\n    initInputCheck() {\n        if (this.isDisabled) return\n\n        // if we want to use ajax we build a promise to get data\n        if (this.onAjax) {\n            this.$input.addEventListener('input', (e) => {\n                this.value = e.target.value\n\n                if (this.minCharsExcceded()) {\n                    super.dispatch('loadingData', {\n                        input: this.$input,\n                        modal: this.$modal,\n                        flotsam: this,\n                        options: this.options,\n                    })\n                    this.onAjax(this.value).then((result) => {\n                        this.data = result\n\n                        super.dispatch('loadedData', {\n                            input: this.$input,\n                            modal: this.$modal,\n                            flotsam: this,\n                            options: this.options,\n                        })\n\n                        this.update()\n                    })\n                } else if (this.isOpen) {\n                    this.closeModal()\n                }\n            })\n        } else {\n            // else if we have static data lets just use that\n            this.$input.addEventListener('input', (e) => {\n                this.value = e.target.value\n                if (this.minCharsExcceded()) {\n                    this.update()\n                } else if (this.isOpen) {\n                    this.closeModal()\n                }\n            })\n        }\n    }\n\n    update() {\n        // filter the data\n        if (this.data.length !== 0) {\n            this.data = this.data.filter((item) => {\n                if (item.toLowerCase().includes(this.value.toLowerCase())) {\n                    return item\n                }\n            })\n        }\n\n        if (this.data.length === 0) {\n            this.showEmptyState()\n        } else {\n            // we have items remove the empty state\n            this.hideEmptyState()\n            this.generateListItems()\n\n            // this only triggers once then sets the modal to open state\n            if (this.isOpen === false) {\n                this.openModal()\n            }\n        }\n    }\n\n    preventSubmit(e) {\n        e.preventDefault()\n    }\n\n    showEmptyState() {\n        this.removeListItems()\n        const emptyHtml = `<div>Sorry there are no results for <strong>\"${this.value}\"</strong> please search again</div>`\n        this.$empty.innerHTML = emptyHtml\n        this.$empty.style.display = 'block'\n\n        if (!this.isOpen) {\n            this.openModal()\n        }\n    }\n\n    hideEmptyState() {\n        this.$empty.innerHTML = ''\n        this.$empty.style.display = 'none'\n    }\n\n    ////////////////////////////////////////////////////\n    // hide and show modal\n    // bread and butter functions all event setup\n    // and breakdown here\n    ////////////////////////////////////////////////////\n    openModal() {\n        if (this.isDisabled) return\n\n        document.addEventListener('submit', this.preventSubmit)\n\n        // this way lets us cleanly breakdown this event listener later\n        this.checkKey = this.checkKey.bind(this)\n        document.addEventListener('keydown', this.checkKey, true)\n        this.isOpen = true\n\n        // styles and classes\n        this.$modal.style.pointerEvents = 'auto'\n        this.$modal.style.visibility = 'visible'\n        this.$input.classList.add(OPEN_CLASS)\n        this.$input.setAttribute('aira-expanded', 'true')\n\n        super.dispatch('openModal', {\n            input: this.$input,\n            modal: this.$modal,\n            flotsam: this,\n            options: this.options,\n        })\n    }\n\n    closeModal() {\n        // clean up the modal containers\n        this.hideEmptyState()\n        this.removeListItems()\n        this.unsetSelected()\n\n        if (this.isOpen) {\n            document.removeEventListener('submit', this.preventSubmit)\n            document.removeEventListener('keydown', this.checkKey, true)\n        }\n\n        this.$modal.style.pointerEvents = 'none'\n        this.$modal.style.visibility = 'hidden'\n        this.$input.classList.remove(OPEN_CLASS)\n        this.$input.focus()\n\n        this.isOpen = false\n\n        super.dispatch('closeModal', {\n            input: this.$input,\n            modal: this.$modal,\n            flotsam: this,\n            options: this.options,\n        })\n    }\n    ////////////////////////////////////////////////////\n    // key event checker - the key event triggers\n    ////////////////////////////////////////////////////\n\n    checkKey(e) {\n        if (e.keyCode == '38') {\n            // up arrowspot\n            this.selectPrev()\n        } else if (e.keyCode == '40') {\n            // down arrow\n            this.selectNext()\n        } else if (e.keyCode == '37') {\n            // left arrow\n        } else if (e.keyCode == '39') {\n            // right arrow\n        } else if (e.keyCode == '27') {\n            // escape\n            e.preventDefault()\n            this.closeModal()\n        } else if (e.keyCode == '9') {\n            // tab\n            e.preventDefault()\n            this.closeModal()\n        } else if (e.keyCode == '13') {\n            // enter\n            e.preventDefault()\n            this.closeModal()\n            this.$input.closest('form').submit()\n        }\n    }\n\n    ////////////////////////////////////////////////////\n    // visual selection of the items on the modal\n    ////////////////////////////////////////////////////\n    selectItem() {\n        const items = [...this.list.querySelectorAll('li')]\n        items.forEach((item, index) => {\n            if (index === this.currentSelected) {\n                item.classList.add('selected-item')\n\n                // a11y features\n                item.setAttribute('aira-selected', 'true')\n                this.$input.setAttribute('aira-activedescendant', item.id)\n\n                // if prevew is on show the selected in the input box\n                if (this.inputPreview) {\n                    this.setInput(item.innerText)\n                }\n\n                // !!EVENT!! on select key\n                super.dispatch('selectKey', {\n                    selected: item.textContent,\n                    input: this.$input,\n                    modal: this.$modal,\n                    flotsam: this,\n                    options: this.options,\n                })\n            } else {\n                item.classList.remove('selected-item')\n                item.setAttribute('aira-selected', 'false')\n            }\n        })\n    }\n\n    selectNext() {\n        if (this.currentSelected === null) {\n            this.currentSelected = 0\n        } else {\n            this.currentSelected = this.currentSelected + 1\n        }\n\n        this.selectItem()\n    }\n\n    selectPrev() {\n        this.currentSelected = this.currentSelected - 1\n        this.selectItem()\n    }\n\n    unsetSelected() {\n        // unset selected\n        this.currentSelected = null\n        const items = [...this.list.querySelectorAll('li')]\n\n        // a11y feature\n        this.$input.removeAttribute('aira-activedescendant')\n\n        items.forEach((item) => {\n            item.classList.remove('selected-item')\n        })\n    }\n\n    generateModal() {\n        return `\n        <div class=\"autocomplete-modal\" id=\"modal-${super.uid}\" >\n            <div class=\"autocomplete-modal__inner\">\n                <ul \n                    class=\"autocomplete-modal__list\" \n                    role=\"listbox\" \n                    id=\"modal-${super.uid}-list\">\n                </ul>\n                <div class=\"autocomplete-modal__empty\" style=\"display: none\"></div>\n            </div>\n        </div>\n    `\n    }\n\n    generateListItems() {\n        // clean up the dropdown of selects\n        this.unsetSelected()\n\n        let list = ``\n\n        this.data.forEach((item, index) => {\n            const regex = new RegExp(this.value, 'gi')\n            const response = item.replace(regex, (str) => {\n                return (\n                    `<span class=\"autocomplete-modal__list-highlight\">` +\n                    str +\n                    '</span>'\n                )\n            })\n            const posIndex = index + 1\n            list += `\n                <li class=\"autocomplete-modal__list-item\" role=\"option\" aria-posinset=\"${posIndex}\" aira-selected=\"false\" id=\"list-item--${this.uid}\">\n                    <button tab-index=\"-1\">\n                        ${response}\n                    </button>\n                </li>`\n        })\n\n        // append list to the screen\n        this.list.innerHTML = list\n\n        // now that list is on DOM add event listeners\n        const listItems = [...this.list.querySelectorAll('li')]\n        listItems.forEach((item) => {\n            item.addEventListener('click', () => {\n                this.setInput(item.innerText)\n                this.closeModal()\n            })\n        })\n    }\n\n    // quick way to breka down list\n    removeListItems() {\n        this.list.innerHTML = ''\n    }\n\n    ////////////////////////////////////////////////////\n    // visually set input value (optionally triggered)\n    ////////////////////////////////////////////////////\n    setInput(textValue) {\n        this.$input.value = textValue\n    }\n\n    ////////////////////////////////////////////////////\n    // public triggers - USERS SHOULD ONLY USE THESE\n    ////////////////////////////////////////////////////\n    triggerClose() {\n        this.closeModal()\n    }\n\n    triggerDisable() {\n        this.isDisabled = true\n        this.closeModal()\n        super.dispatch('disabled', {\n            input: this.$input,\n            modal: this.$modal,\n            flotsam: this,\n            options: this.options,\n        })\n    }\n\n    triggerEnable() {\n        this.isDisabled = false\n    }\n\n    ////////////////////////////////////////////////////\n    // utils\n    ////////////////////////////////////////////////////\n    minCharsExcceded() {\n        if (this.value.length >= this.minChars) {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    ////////////////////////////////////////////////////\n    // init fn - run on singleton creation\n    ////////////////////////////////////////////////////\n    init() {\n        this._self = this // so we can remove event listeners cleanly\n\n        // state\n        this.currentSelected = null\n        this.isDisabled = false\n\n        this.setUp()\n        // inject the modal onto the page and get an instance of it\n        this.initModal()\n\n        // add listener to onInput of input\n        this.initInputCheck()\n\n        // bug not triggering right away, so set it to next cycle\n        setTimeout(() => {\n            super.dispatch('init', {\n                input: this.$input,\n                modal: this.$modal,\n                flotsam: this,\n                options: this.options,\n            })\n        }, 0)\n    }\n}\n\nexport default flotsam\n"],"names":["DispatcherEvent","constructor","eventName","this","callbacks","registerCallback","callback","push","unregisterCallback","index","indexOf","splice","fire","data","slice","forEach","EventComponent","events","uid","Math","floor","random","dispatch","event","on","off","length","OPEN_CLASS","flotsam","options","super","$input","el","minChars","inputPreview","onAjax","isEmpty","hasEmptyState","isOpen","init","setUp","setAttribute","id","initModal","insertAdjacentHTML","generateModal","$modal","document","querySelector","list","$empty","style","pointerEvents","visibility","initInputCheck","isDisabled","addEventListener","e","value","target","minCharsExcceded","input","modal","then","result","update","closeModal","filter","item","toLowerCase","includes","showEmptyState","hideEmptyState","generateListItems","openModal","preventSubmit","preventDefault","removeListItems","innerHTML","display","checkKey","bind","classList","add","unsetSelected","removeEventListener","remove","focus","keyCode","selectPrev","selectNext","closest","submit","selectItem","querySelectorAll","currentSelected","setInput","innerText","selected","textContent","items","removeAttribute","regex","RegExp","replace","str","response","textValue","triggerClose","triggerDisable","triggerEnable","_self","setTimeout"],"mappings":"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"}