{"version":3,"file":"flotsam.modern.js","sources":["../src/index.js"],"sourcesContent":["const modal = () => {\n    return `\n        <div class=\"autocomplete-modal we active\">\n            <div class=\"autocomplete-modal__inner\">\n                <ul class=\"autocomplete-modal__list\" role=\"combobox\">\n                </ul>\n            </div>\n        </div>\n    `\n}\n\nconst OPEN_CLASS = 'is-open'\n\n// helper class to run event busing\nclass DispatcherEvent {\n    constructor(eventName) {\n        this.eventName = eventName\n        this.callbacks = []\n    }\n\n    registerCallback(callback) {\n        this.callbacks.push(callback)\n    }\n\n    unregisterCallback(callback) {\n        const index = this.callbacks.indexOf(callback)\n        if (index > -1) {\n            this.callbacks.splice(index, 1)\n        }\n    }\n\n    fire(data) {\n        const callbacks = this.callbacks.slice(0)\n        callbacks.forEach((callback) => {\n            callback(data)\n        })\n    }\n}\n\nclass floatsam {\n    ////////////////////////////////////////////////////\n    // construct\n    ////////////////////////////////////////////////////\n    constructor(options) {\n        this.events = {}\n\n        // for debugging\n        this.options = options\n\n        this.$input = options.el\n        this.data = options.data ? options.data : false\n        this.minChars = options.minChars ? options.minChars : 2\n        this.isOpen = false\n        this.isListEmpty = true\n        this.isFocused = false\n        this.inputPreview = true\n        this.onAjax = options.onAjax\n        this.init()\n    }\n\n    ////////////////////////////////////////////////////\n    // event trigger and listeners\n    ////////////////////////////////////////////////////\n    dispatch(eventName, data) {\n        const event = this.events[eventName]\n        if (event) {\n            event.fire(data)\n        }\n    }\n\n    on(eventName, callback) {\n        let event = this.events[eventName]\n        if (!event) {\n            event = new DispatcherEvent(eventName)\n            this.events[eventName] = event\n        }\n        event.registerCallback(callback)\n    }\n\n    off(eventName, callback) {\n        const event = this.events[eventName]\n        if (event && event.callbacks.indexOf(callback) > -1) {\n            event.unregisterCallback(callback)\n            if (event.callbacks.length === 0) {\n                delete this.events[eventName]\n            }\n        }\n    }\n\n    ////////////////////////////////////////////////////\n    // inits\n    ////////////////////////////////////////////////////\n\n    // setup has some housekeeping of inputs and attrs to increase quality of life\n    setUp() {\n        // add autocomplete off to input to not get in the way of dropdown\n        this.$input.setAttribute('autocomplete', 'off')\n    }\n\n    initModal() {\n        // append modal to the page\n        this.$input.insertAdjacentHTML('afterend', modal())\n\n        // grab an instance of it to use later\n        this.modal = document.querySelector('.autocomplete-modal')\n        this.list = this.modal.querySelector('.autocomplete-modal__list')\n\n        // intial modal styles\n        this.modal.style.pointerEvents = 'none'\n        this.modal.style.visibility = 'hidden'\n    }\n\n    initInputCheck() {\n        // check the input\n\n        if (this.isDisabled) return\n\n        // if we want to use ajax we build a promise to get data\n        if (this.onAjax) {\n            this.$input.addEventListener('input', (e) => {\n                this.value = e.target.value\n\n                if (this.value.length >= this.minChars) {\n                    this.dispatch('loadingData', {\n                        input: this.$input,\n                        modal: this.modal,\n                        floatsam: this,\n                        options: this.options,\n                    })\n                    this.onAjax(this.value).then((result) => {\n                        this.data = result\n\n                        this.dispatch('loadedData', {\n                            input: this.$input,\n                            modal: this.modal,\n                            floatsam: this,\n                            options: this.options,\n                        })\n\n                        this.update()\n                    })\n                } else {\n                    this.closeModal()\n                }\n            })\n        } else {\n            this.$input.addEventListener('input', (e) => {\n                this.value = e.target.value\n                if (this.value.length >= this.minChars) {\n                    this.update()\n                }\n            })\n        }\n    }\n\n    update() {\n        // do all data updates here\n\n        // grab a copy of the current list so we can do some minipulation\n\n        if (this.data) {\n            console.log(this.value)\n            this.generateListItems()\n\n            // this only triggers once then sets the modal to open state\n            if (this.isOpen === false) {\n                this.openModal()\n            }\n        } else {\n            this.closeModal()\n        }\n    }\n\n    preventSubmit(e) {\n        e.preventDefault()\n    }\n\n    ////////////////////////////////////////////////////\n    // hide and show modal\n    // bread and butter functions all event setup\n    // and breakdown here\n    ////////////////////////////////////////////////////\n    openModal() {\n        if (this.isDisabled) return\n\n        document.addEventListener('submit', this.preventSubmit)\n        console.log('adding keydown')\n        this.checkKey = this.checkKey.bind(this)\n        document.addEventListener('keydown', this.checkKey, true)\n\n        // styles and classes\n        this.modal.style.pointerEvents = 'auto'\n        this.modal.style.visibility = 'visible'\n        this.$input.classList.add(OPEN_CLASS)\n\n        this.isOpen = true\n\n        this.dispatch('openModal', {\n            input: this.$input,\n            modal: this.modal,\n            floatsam: this,\n            options: this.options,\n        })\n    }\n\n    closeModal() {\n        console.log('close list')\n        this.list.innerHTML = ''\n        this.currentSelected = null\n        if (this.isOpen) {\n            document.removeEventListener('submit', this.preventSubmit)\n            console.log('removing keydown')\n            document.removeEventListener('keydown', this.checkKey, true)\n        }\n\n        this.modal.style.pointerEvents = 'none'\n        this.modal.style.visibility = 'hidden'\n        this.$input.classList.remove(OPEN_CLASS)\n        this.$input.focus()\n\n        this.isOpen = false\n\n        this.dispatch('closeModal', {\n            input: this.$input,\n            modal: this.modal,\n            floatsam: this,\n            options: this.options,\n        })\n    }\n    ////////////////////////////////////////////////////\n    // key event checker - the key event triggers\n    ////////////////////////////////////////////////////\n\n    checkKey(e) {\n        if (e.keyCode == '38') {\n            // up arrowspot\n            this.selectPrev()\n        } else if (e.keyCode == '40') {\n            // down arrow\n            this.selectNext()\n        } else if (e.keyCode == '37') {\n            // left arrow\n        } else if (e.keyCode == '39') {\n            // right arrow\n        } else if (e.keyCode == '27') {\n            // escape\n            e.preventDefault()\n            this.closeModal()\n        } else if (e.keyCode == '9') {\n            // tab\n            e.preventDefault()\n            this.closeModal()\n        } else if (e.keyCode == '13') {\n            // enter\n            e.preventDefault()\n            this.closeModal()\n            this.$input.closest('form').submit()\n        }\n    }\n\n    ////////////////////////////////////////////////////\n    // visual selection of the items on the modal\n    ////////////////////////////////////////////////////\n    selectItem() {\n        const items = [...this.list.querySelectorAll('li')]\n        console.log(this.currentSelected)\n        items.forEach((item, index) => {\n            if (index === this.currentSelected) {\n                item.classList.add('selected-item')\n                if (this.inputPreview) {\n                    this.setInput(item.textContent)\n                }\n\n                // !!EVENT!! on select key\n                this.dispatch('selectKey', {\n                    selected: item.textContent,\n                    input: this.$input,\n                    modal: this.modal,\n                    floatsam: this,\n                    options: this.options,\n                })\n            } else {\n                item.classList.remove('selected-item')\n            }\n        })\n    }\n\n    selectNext() {\n        if (this.currentSelected === null) {\n            this.currentSelected = 0\n        } else {\n            this.currentSelected = this.currentSelected + 1\n        }\n        this.selectItem()\n    }\n\n    selectPrev() {\n        this.currentSelected = this.currentSelected - 1\n        this.selectItem()\n    }\n\n    ////////////////////////////////////////////////////\n    // render function for the list\n    // - runs on every data fetch\n    ////////////////////////////////////////////////////\n    generateListItems() {\n        let list = ``\n\n        if (!this.data) {\n            console.warn('no data!!!', this.value)\n            return\n        }\n\n        const filteredData = this.data.filter((item) => {\n            console.log(this.value)\n            if (item.toLowerCase().includes(this.value.toLowerCase())) {\n                return item\n            }\n        })\n\n        filteredData.forEach((item) => {\n            const regex = new RegExp(this.value, 'gi')\n            const response = item.replace(regex, (str) => {\n                return (\n                    \"<span style='background-color: yellow;'>\" + str + '</span>'\n                )\n            })\n            list = list + `<li role=\"option\">${response}</li>`\n        })\n\n        // append list to the screen\n        this.list.innerHTML = list\n\n        // now that list is on DOM add event listeners\n        const listItems = [...this.list.querySelectorAll('li')]\n        listItems.forEach((item) => {\n            item.addEventListener('click', () => {\n                this.setInput(item.textContent)\n                this.closeModal()\n            })\n        })\n    }\n\n    ////////////////////////////////////////////////////\n    // visually set input value (optionally triggered)\n    ////////////////////////////////////////////////////\n    setInput(textValue) {\n        this.$input.value = textValue\n    }\n\n    ////////////////////////////////////////////////////\n    // public triggers - USERS SHOULD ONLY USE THESE\n    ////////////////////////////////////////////////////\n    triggerClose() {\n        this.closeModal()\n    }\n\n    triggerDisable() {\n        this.isDisabled = true\n        this.closeModal()\n        this.dispatch('disabled', {\n            input: this.$input,\n            modal: this.modal,\n            floatsam: this,\n            options: this.options,\n        })\n    }\n\n    triggerEnable() {\n        this.isDisabled = false\n    }\n\n    ////////////////////////////////////////////////////\n    // utils\n    ////////////////////////////////////////////////////\n    minCharsExcceded() {\n        if (this.value.length >= this.minChars) {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    ////////////////////////////////////////////////////\n    // init fn - run on singleton creation\n    ////////////////////////////////////////////////////\n    init() {\n        this._self = this\n        this.currentSelected = null\n        this.isDisabled = false\n\n        this.setUp()\n        // inject the modal onto the page and get an instance of it\n        this.initModal()\n\n        // add listener to onInput of input\n        this.initInputCheck()\n\n        console.log('we are in dev mode')\n\n        this.dispatch('init', {\n            input: this.$input,\n            modal: this.modal,\n            floatsam: this,\n            options: this.options,\n        })\n    }\n}\n\nexport default floatsam\n"],"names":["OPEN_CLASS","DispatcherEvent","constructor","eventName","this","callbacks","registerCallback","callback","push","unregisterCallback","index","indexOf","splice","fire","data","slice","forEach","options","events","$input","el","minChars","isOpen","isListEmpty","isFocused","inputPreview","onAjax","init","dispatch","event","on","off","length","setUp","setAttribute","initModal","insertAdjacentHTML","modal","document","querySelector","list","style","pointerEvents","visibility","initInputCheck","isDisabled","addEventListener","e","value","target","input","floatsam","then","result","update","closeModal","console","log","generateListItems","openModal","preventSubmit","preventDefault","checkKey","bind","classList","add","innerHTML","currentSelected","removeEventListener","remove","focus","keyCode","selectPrev","selectNext","closest","submit","selectItem","querySelectorAll","items","item","setInput","textContent","selected","filter","toLowerCase","includes","response","replace","regex","str","warn","textValue","triggerClose","triggerDisable","triggerEnable","minCharsExcceded","_self"],"mappings":"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"}