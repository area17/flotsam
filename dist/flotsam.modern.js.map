{"version":3,"file":"flotsam.modern.js","sources":["../src/DispatcherEvent.js","../src/EventComponent.js","../src/index.js"],"sourcesContent":["// helper class to run event busing\nclass DispatcherEvent {\n    constructor(eventName) {\n        this.eventName = eventName\n        this.callbacks = []\n    }\n\n    registerCallback(callback) {\n        this.callbacks.push(callback)\n    }\n\n    unregisterCallback(callback) {\n        const index = this.callbacks.indexOf(callback)\n        if (index > -1) {\n            this.callbacks.splice(index, 1)\n        }\n    }\n\n    fire(data) {\n        const callbacks = this.callbacks.slice(0)\n        callbacks.forEach((callback) => {\n            callback(data)\n        })\n    }\n}\n\nexport default DispatcherEvent\n","import DispatcherEvent from './DispatcherEvent'\n\nclass EventComponent {\n    ////////////////////////////////////////////////////\n    // construct\n    ////////////////////////////////////////////////////\n    constructor() {\n        this.events = {}\n        this.uid = Math.floor(1000 + Math.random() * 90000)\n    }\n\n    ////////////////////////////////////////////////////\n    // event trigger and listeners\n    ////////////////////////////////////////////////////\n    dispatch(eventName, data) {\n        const event = this.events[eventName]\n        if (event) {\n            event.fire(data)\n        }\n    }\n\n    on(eventName, callback) {\n        let event = this.events[eventName]\n        if (!event) {\n            event = new DispatcherEvent(eventName)\n            this.events[eventName] = event\n        }\n        event.registerCallback(callback)\n    }\n\n    off(eventName, callback) {\n        const event = this.events[eventName]\n        if (event && event.callbacks.indexOf(callback) > -1) {\n            event.unregisterCallback(callback)\n            if (event.callbacks.length === 0) {\n                delete this.events[eventName]\n            }\n        }\n    }\n}\n\nexport default EventComponent\n","import EventComponent from './EventComponent'\nimport './styles.css'\n\nconst OPEN_CLASS = 'is-open'\n\nclass flotsam extends EventComponent {\n    ////////////////////////////////////////////////////\n    // construct\n    ////////////////////////////////////////////////////\n    constructor(options) {\n        // class inheritance setup\n        // adding core events module\n        super()\n\n        // for debugging\n        this.options = options\n\n        this.$input = options.el\n        this.data = options.data ? options.data : false\n        this.minChars = options.minChars ? options.minChars : 2\n        this.inputPreview = typeof(options.inputPreview) === 'boolean' ? options.inputPreview : true\n        this.onAjax = typeof(options.onAjax) === 'function' ? options.onAjax : null\n\n        this.hint = options.hint\n            ? options.hint\n            : 'When autocomplete results are available, use up and down arrows to review and enter to select. Touch device users, explore by touch or with swipe gestures.'\n\n        this.noResultsText = options.noResultsText\n            ? options.noResultsText\n            : 'Sorry there are no results for ::term:: please search again.'\n\n        this.isEmpty = true\n        this.hasEmptyState = true\n\n        // native state\n        this.isOpen = false\n\n        this.init()\n    }\n\n    ////////////////////////////////////////////////////\n    // inits\n    ////////////////////////////////////////////////////\n\n    // setup has some housekeeping of inputs and attrs to increase quality of life\n    setUp() {\n        // add autocomplete off to input to not get in the way of dropdown\n        this.$input.setAttribute('autocomplete', 'off')\n        this.$input.setAttribute('aria-expanded', 'false')\n        this.$input.setAttribute('aria-haspopup', 'listbox')\n        this.$input.setAttribute('role', 'combobox')\n        this.$input.setAttribute('aria-autocomplete', 'list')\n        this.$input.setAttribute('aria-owns', `modal-${this.uid}-list`)\n        this.$input.id = `flotsam-input-${this.uid}`\n        this.$input.setAttribute(\n            'aria-describedby',\n            `assistiveHint-${this.uid}`\n        )\n    }\n\n    initModal() {\n        // append modal to the page\n        this.$input.insertAdjacentHTML('afterend', this.generateModal())\n        this.$input.insertAdjacentHTML('afterend', this.generateAssistiveHint())\n        this.$input.insertAdjacentHTML('afterend', this.generateStatus())\n\n        // grab an instance of elems to use later\n        this.$modal = document.querySelector(`#modal-${this.uid}`)\n        this.$status = document.querySelector(`#status-${this.uid}`)\n        this.list = this.$modal.querySelector('.flotsam-modal__list')\n        this.$empty = this.$modal.querySelector('.flotsam-modal__empty')\n\n        // intial modal styles\n        this.$modal.style.pointerEvents = 'none'\n        this.$modal.style.visibility = 'hidden'\n    }\n\n    initInputCheck() {\n        if (this.isDisabled) return\n\n        // if we want to use ajax we build a promise to get data\n        if (this.onAjax) {\n            this.$input.addEventListener('input', (e) => {\n                this.value = e.target.value\n\n                if (this.minCharsExcceded()) {\n                    super.dispatch('loadingData', {\n                        input: this.$input,\n                        modal: this.$modal,\n                        flotsam: this,\n                        options: this.options,\n                    })\n                    this.onAjax(this.value).then((result) => {\n                        this.data = result\n\n                        super.dispatch('loadedData', {\n                            input: this.$input,\n                            modal: this.$modal,\n                            flotsam: this,\n                            options: this.options,\n                        })\n\n                        this.update()\n                    })\n                } else if (this.isOpen) {\n                    this.closeModal()\n                }\n            })\n        } else {\n            // else if we have static data lets just use that\n            this.$input.addEventListener('input', (e) => {\n                this.value = e.target.value\n                if (this.minCharsExcceded()) {\n                    this.update()\n                } else if (this.isOpen) {\n                    this.closeModal()\n                }\n            })\n        }\n    }\n\n    ////////////////////////////////////////////////////\n    // init assisitve hint\n    ////////////////////////////////////////////////////\n\n    generateAssistiveHint() {\n        return `\n            <div id=\"assistiveHint-${this.uid}\" class=\"flotsam-modal__hint\">\n                ${this.hint}\n            </div>\n        `\n    }\n\n    generateStatus() {\n        return `\n            <div id=\"status-${this.uid}\" aria-role='status' aria-live=\"polite\" class=\"flotsam-modal__status\">\n                \n            </div>\n        `\n    }\n\n    update() {\n        // filter the data\n        if (this.data.length !== 0) {\n            this.data = this.data.filter((item) => {\n                if (item.toLowerCase().includes(this.value.toLowerCase())) {\n                    return item\n                }\n            })\n        }\n\n        if (this.data.length === 0) {\n            this.showEmptyState()\n        } else {\n            // we have items remove the empty state\n            this.hideEmptyState()\n            this.generateListItems()\n\n            // this only triggers once then sets the modal to open state\n            if (this.isOpen === false) {\n                this.openModal()\n            }\n        }\n    }\n\n    preventSubmit(e) {\n        e.preventDefault()\n    }\n\n    showEmptyState() {\n        this.removeListItems()\n        const str = this.noResultsText.replace('::term::', `<strong>\"${this.value}\"</strong>`)\n        const emptyHtml = `<div>${str}</div>`\n        this.$empty.innerHTML = emptyHtml\n        this.$empty.style.display = 'block'\n\n        if (!this.isOpen) {\n            this.openModal()\n        }\n    }\n\n    hideEmptyState() {\n        this.$empty.innerHTML = ''\n        this.$empty.style.display = 'none'\n    }\n\n    ////////////////////////////////////////////////////\n    // hide and show modal\n    // bread and butter functions all event setup\n    // and breakdown here\n    ////////////////////////////////////////////////////\n    openModal() {\n        if (this.isDisabled) return\n\n        document.addEventListener('submit', this.preventSubmit)\n\n        // this way lets us cleanly breakdown this event listener later\n        this.checkKey = this.checkKey.bind(this)\n        document.addEventListener('keydown', this.checkKey, true)\n        this.isOpen = true\n\n        // styles and classes\n        this.$modal.style.pointerEvents = 'auto'\n        this.$modal.style.visibility = 'visible'\n        this.$input.classList.add(OPEN_CLASS)\n        this.$input.setAttribute('aria-expanded', 'true')\n\n        super.dispatch('openModal', {\n            input: this.$input,\n            modal: this.$modal,\n            flotsam: this,\n            options: this.options,\n        })\n    }\n\n    closeModal() {\n        // clean up the modal containers\n        this.hideEmptyState()\n        this.removeListItems()\n        this.unsetSelected()\n\n        if (this.isOpen) {\n            document.removeEventListener('submit', this.preventSubmit)\n            document.removeEventListener('keydown', this.checkKey, true)\n        }\n\n        this.$modal.style.pointerEvents = 'none'\n        this.$modal.style.visibility = 'hidden'\n        this.$input.classList.remove(OPEN_CLASS)\n        this.$input.focus()\n\n        this.isOpen = false\n\n        super.dispatch('closeModal', {\n            input: this.$input,\n            modal: this.$modal,\n            flotsam: this,\n            options: this.options,\n        })\n    }\n    ////////////////////////////////////////////////////\n    // key event checker - the key event triggers\n    ////////////////////////////////////////////////////\n\n    checkKey(e) {\n        if (e.keyCode == '38') {\n            // up arrowspot\n            this.selectPrev()\n        } else if (e.keyCode == '40') {\n            // down arrow\n            this.selectNext()\n        } else if (e.keyCode == '37') {\n            // left arrow\n        } else if (e.keyCode == '39') {\n            // right arrow\n        } else if (e.keyCode == '27') {\n            // escape\n            e.preventDefault()\n            this.closeModal()\n        } else if (e.keyCode == '9') {\n            // tab\n            e.preventDefault()\n            this.closeModal()\n        } else if (e.keyCode == '13') {\n            // enter\n            e.preventDefault()\n            this.closeModal()\n            this.$input.closest('form').submit()\n        }\n    }\n\n    ////////////////////////////////////////////////////\n    // visual selection of the items on the modal\n    ////////////////////////////////////////////////////\n    selectItem() {\n        const items = [...this.list.querySelectorAll('li')]\n        items.forEach((item, index) => {\n            if (index === this.currentSelected) {\n                item.classList.add('flotsam-modal__selected-item')\n\n                // a11y features\n                item.setAttribute('aria-selected', 'true')\n                this.$input.setAttribute('aria-activedescendant', item.id)\n\n                // if prevew is on show the selected in the input box\n                if (this.inputPreview) {\n                    this.setInput(item.innerText)\n                }\n\n                // !!EVENT!! on select key\n                super.dispatch('selectKey', {\n                    selected: item.textContent,\n                    input: this.$input,\n                    modal: this.$modal,\n                    flotsam: this,\n                    options: this.options,\n                })\n            } else {\n                item.classList.remove('flotsam-modal__selected-item')\n                item.setAttribute('aria-selected', 'false')\n            }\n        })\n    }\n\n    selectNext() {\n        if (this.currentSelected === null) {\n            this.currentSelected = 0\n        } else {\n            this.currentSelected = this.currentSelected + 1\n        }\n\n        this.selectItem()\n    }\n\n    selectPrev() {\n        this.currentSelected = this.currentSelected - 1\n        this.selectItem()\n    }\n\n    unsetSelected() {\n        // unset selected\n        this.currentSelected = null\n        const items = [...this.list.querySelectorAll('li')]\n\n        // a11y feature\n        this.$input.removeAttribute('aria-activedescendant')\n\n        items.forEach((item) => {\n            item.classList.remove('flotsam-modal__selected-item')\n        })\n    }\n\n    generateModal() {\n        return `\n        <div class=\"flotsam-modal\" id=\"modal-${this.uid}\" >\n            <div class=\"flotsam-modal__inner\">\n                <ul \n                    class=\"flotsam-modal__list\"\n                    role=\"listbox\" \n                    id=\"modal-${this.uid}-list\">\n                </ul>\n                <div class=\"flotsam-modal__empty\" style=\"display: none\"></div>\n            </div>\n        </div>\n    `\n    }\n\n    generateListItems() {\n        // clean up the dropdown of selects\n        this.unsetSelected()\n\n        let list = ``\n\n        this.data.forEach((item, index) => {\n            const regex = new RegExp(this.value, 'gi')\n            const response = item.replace(regex, (str) => {\n                return (\n                    `<span class=\"flotsam-modal__list-highlight\">` +\n                    str +\n                    '</span>'\n                )\n            })\n            const posIndex = index + 1\n            list += `\n                <li class=\"flotsam-modal__list-item\" role=\"option\" aria-posinset=\"${posIndex}\" aria-setsize=\"${this.data.length}\" aria-selected=\"false\" id=\"list-item-${index}--${this.uid}\" tab-index=\"-1\">\n                    ${response}\n                </li>`\n        })\n\n        // append list to the screen\n        this.list.innerHTML = list\n\n        // now that list is on DOM add event listeners\n        const listItems = [...this.list.querySelectorAll('li')]\n        listItems.forEach((item) => {\n            item.addEventListener('click', () => {\n                this.setInput(item.innerText)\n                this.closeModal()\n            })\n        })\n    }\n\n    // quick way to breka down list\n    removeListItems() {\n        this.list.innerHTML = ''\n    }\n\n    ////////////////////////////////////////////////////\n    // visually set input value (optionally triggered)\n    ////////////////////////////////////////////////////\n    setInput(textValue) {\n        this.$input.value = textValue\n    }\n\n    ////////////////////////////////////////////////////\n    // public triggers - USERS SHOULD ONLY USE THESE\n    ////////////////////////////////////////////////////\n    triggerClose() {\n        this.closeModal()\n    }\n\n    triggerDisable() {\n        this.isDisabled = true\n        this.closeModal()\n        super.dispatch('disabled', {\n            input: this.$input,\n            modal: this.$modal,\n            flotsam: this,\n            options: this.options,\n        })\n    }\n\n    triggerEnable() {\n        this.isDisabled = false\n    }\n\n    ////////////////////////////////////////////////////\n    // utils\n    ////////////////////////////////////////////////////\n    minCharsExcceded() {\n        if (this.value.length >= this.minChars) {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    ////////////////////////////////////////////////////\n    // init fn - run on singleton creation\n    ////////////////////////////////////////////////////\n    init() {\n        this._self = this // so we can remove event listeners cleanly\n\n        // state\n        this.currentSelected = null\n        this.isDisabled = false\n\n        if (!this.data && !this.onAjax) {\n            this.isDisabled = true\n            console.error('flotsam: no data specified', this)\n            return\n        }\n\n        this.setUp()\n        // inject the modal onto the page and get an instance of it\n        this.initModal()\n\n        // add listener to onInput of input\n        this.initInputCheck()\n\n        // bug not triggering right away, so set it to next cycle\n        setTimeout(() => {\n            super.dispatch('init', {\n                input: this.$input,\n                modal: this.$modal,\n                flotsam: this,\n                options: this.options,\n            })\n        }, 0)\n    }\n}\n\nexport default flotsam\n"],"names":["DispatcherEvent","constructor","eventName","this","callbacks","registerCallback","callback","push","unregisterCallback","index","indexOf","splice","fire","data","slice","forEach","EventComponent","events","uid","Math","floor","random","dispatch","event","on","off","length","OPEN_CLASS","options","super","$input","el","minChars","inputPreview","onAjax","hint","noResultsText","isEmpty","hasEmptyState","isOpen","init","setUp","setAttribute","id","initModal","insertAdjacentHTML","generateModal","generateAssistiveHint","generateStatus","$modal","document","querySelector","$status","list","$empty","style","pointerEvents","visibility","initInputCheck","isDisabled","addEventListener","e","value","target","minCharsExcceded","input","modal","flotsam","then","result","update","closeModal","filter","item","toLowerCase","includes","showEmptyState","hideEmptyState","generateListItems","openModal","preventSubmit","preventDefault","removeListItems","replace","innerHTML","str","display","checkKey","bind","classList","add","unsetSelected","removeEventListener","remove","focus","keyCode","selectPrev","selectNext","closest","submit","selectItem","querySelectorAll","currentSelected","setInput","innerText","selected","textContent","items","removeAttribute","regex","RegExp","response","textValue","triggerClose","triggerDisable","triggerEnable","_self","console","error","setTimeout"],"mappings":"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"}