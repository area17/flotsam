{"version":3,"file":"flotsam.umd.js","sources":["../src/index.js"],"sourcesContent":["const modal = () => {\n    return `\n        <div class=\"autocomplete-modal we active\">\n            <div class=\"autocomplete-modal__inner\">\n                <ul class=\"autocomplete-modal__list\" role=\"combobox\">\n                </ul>\n            </div>\n        </div>\n    `\n}\n\nconst OPEN_CLASS = 'is-open'\n\n// helper class to run event busing\nclass DispatcherEvent {\n    constructor(eventName) {\n        this.eventName = eventName\n        this.callbacks = []\n    }\n\n    registerCallback(callback) {\n        this.callbacks.push(callback)\n    }\n\n    unregisterCallback(callback) {\n        const index = this.callbacks.indexOf(callback)\n        if (index > -1) {\n            this.callbacks.splice(index, 1)\n        }\n    }\n\n    fire(data) {\n        const callbacks = this.callbacks.slice(0)\n        callbacks.forEach((callback) => {\n            callback(data)\n        })\n    }\n}\n\nclass floatsam {\n    ////////////////////////////////////////////////////\n    // construct\n    ////////////////////////////////////////////////////\n    constructor(options) {\n        this.events = {}\n\n        // for debugging\n        this.options = options\n\n        this.$input = options.el\n        this.data = options.data ? options.data : false\n        this.minChars = options.minChars ? options.minChars : 2\n        this.isOpen = false\n        this.isListEmpty = true\n        this.isFocused = false\n        this.inputPreview = true\n        this.onAjax = options.onAjax\n        this.init()\n    }\n\n    ////////////////////////////////////////////////////\n    // event trigger and listeners\n    ////////////////////////////////////////////////////\n    dispatch(eventName, data) {\n        const event = this.events[eventName]\n        if (event) {\n            event.fire(data)\n        }\n    }\n\n    on(eventName, callback) {\n        let event = this.events[eventName]\n        if (!event) {\n            event = new DispatcherEvent(eventName)\n            this.events[eventName] = event\n        }\n        event.registerCallback(callback)\n    }\n\n    off(eventName, callback) {\n        const event = this.events[eventName]\n        if (event && event.callbacks.indexOf(callback) > -1) {\n            event.unregisterCallback(callback)\n            if (event.callbacks.length === 0) {\n                delete this.events[eventName]\n            }\n        }\n    }\n\n    ////////////////////////////////////////////////////\n    // inits\n    ////////////////////////////////////////////////////\n\n    // setup has some housekeeping of inputs and attrs to increase quality of life\n    setUp() {\n        // add autocomplete off to input to not get in the way of dropdown\n        this.$input.setAttribute('autocomplete', 'off')\n    }\n\n    initModal() {\n        // append modal to the page\n        this.$input.insertAdjacentHTML('afterend', modal())\n\n        // grab an instance of it to use later\n        this.modal = document.querySelector('.autocomplete-modal')\n        this.list = this.modal.querySelector('.autocomplete-modal__list')\n\n        // intial modal styles\n        this.modal.style.pointerEvents = 'none'\n        this.modal.style.visibility = 'hidden'\n    }\n\n    initInputCheck() {\n        // check the input\n\n        if (this.isDisabled) return\n\n        // if we want to use ajax we build a promise to get data\n        if (this.onAjax) {\n            this.$input.addEventListener('input', (e) => {\n                this.value = e.target.value\n\n                if (this.value.length >= this.minChars) {\n                    this.dispatch('loadingData', {\n                        input: this.$input,\n                        modal: this.modal,\n                        floatsam: this,\n                        options: this.options,\n                    })\n                    this.onAjax(this.value).then((result) => {\n                        this.data = result\n\n                        this.dispatch('loadedData', {\n                            input: this.$input,\n                            modal: this.modal,\n                            floatsam: this,\n                            options: this.options,\n                        })\n\n                        this.update()\n                    })\n                } else {\n                    this.closeModal()\n                }\n            })\n        } else {\n            this.$input.addEventListener('input', (e) => {\n                this.value = e.target.value\n                if (this.value.length >= this.minChars) {\n                    this.update()\n                }\n            })\n        }\n    }\n\n    update() {\n        // do all data updates here\n\n        // grab a copy of the current list so we can do some minipulation\n\n        if (this.data) {\n            console.log(this.value)\n            this.generateListItems()\n\n            // this only triggers once then sets the modal to open state\n            if (this.isOpen === false) {\n                this.openModal()\n            }\n        } else {\n            this.closeModal()\n        }\n    }\n\n    preventSubmit(e) {\n        e.preventDefault()\n    }\n\n    ////////////////////////////////////////////////////\n    // hide and show modal\n    // bread and butter functions all event setup\n    // and breakdown here\n    ////////////////////////////////////////////////////\n    openModal() {\n        if (this.isDisabled) return\n\n        document.addEventListener('submit', this.preventSubmit)\n        console.log('adding keydown')\n        this.checkKey = this.checkKey.bind(this)\n        document.addEventListener('keydown', this.checkKey, true)\n\n        // styles and classes\n        this.modal.style.pointerEvents = 'auto'\n        this.modal.style.visibility = 'visible'\n        this.$input.classList.add(OPEN_CLASS)\n\n        this.isOpen = true\n\n        this.dispatch('openModal', {\n            input: this.$input,\n            modal: this.modal,\n            floatsam: this,\n            options: this.options,\n        })\n    }\n\n    closeModal() {\n        console.log('close list')\n        this.list.innerHTML = ''\n        this.currentSelected = null\n        if (this.isOpen) {\n            document.removeEventListener('submit', this.preventSubmit)\n            console.log('removing keydown')\n            document.removeEventListener('keydown', this.checkKey, true)\n        }\n\n        this.modal.style.pointerEvents = 'none'\n        this.modal.style.visibility = 'hidden'\n        this.$input.classList.remove(OPEN_CLASS)\n        this.$input.focus()\n\n        this.isOpen = false\n\n        this.dispatch('closeModal', {\n            input: this.$input,\n            modal: this.modal,\n            floatsam: this,\n            options: this.options,\n        })\n    }\n    ////////////////////////////////////////////////////\n    // key event checker - the key event triggers\n    ////////////////////////////////////////////////////\n\n    checkKey(e) {\n        if (e.keyCode == '38') {\n            // up arrowspot\n            this.selectPrev()\n        } else if (e.keyCode == '40') {\n            // down arrow\n            this.selectNext()\n        } else if (e.keyCode == '37') {\n            // left arrow\n        } else if (e.keyCode == '39') {\n            // right arrow\n        } else if (e.keyCode == '27') {\n            // escape\n            e.preventDefault()\n            this.closeModal()\n        } else if (e.keyCode == '9') {\n            // tab\n            e.preventDefault()\n            this.closeModal()\n        } else if (e.keyCode == '13') {\n            // enter\n            e.preventDefault()\n            this.closeModal()\n            this.$input.closest('form').submit()\n        }\n    }\n\n    ////////////////////////////////////////////////////\n    // visual selection of the items on the modal\n    ////////////////////////////////////////////////////\n    selectItem() {\n        const items = [...this.list.querySelectorAll('li')]\n        console.log(this.currentSelected)\n        items.forEach((item, index) => {\n            if (index === this.currentSelected) {\n                item.classList.add('selected-item')\n                if (this.inputPreview) {\n                    this.setInput(item.textContent)\n                }\n\n                // !!EVENT!! on select key\n                this.dispatch('selectKey', {\n                    selected: item.textContent,\n                    input: this.$input,\n                    modal: this.modal,\n                    floatsam: this,\n                    options: this.options,\n                })\n            } else {\n                item.classList.remove('selected-item')\n            }\n        })\n    }\n\n    selectNext() {\n        if (this.currentSelected === null) {\n            this.currentSelected = 0\n        } else {\n            this.currentSelected = this.currentSelected + 1\n        }\n        this.selectItem()\n    }\n\n    selectPrev() {\n        this.currentSelected = this.currentSelected - 1\n        this.selectItem()\n    }\n\n    ////////////////////////////////////////////////////\n    // render function for the list\n    // - runs on every data fetch\n    ////////////////////////////////////////////////////\n    generateListItems() {\n        let list = ``\n\n        if (!this.data) {\n            console.warn('no data!!!', this.value)\n            return\n        }\n\n        const filteredData = this.data.filter((item) => {\n            console.log(this.value)\n            if (item.toLowerCase().includes(this.value.toLowerCase())) {\n                return item\n            }\n        })\n\n        filteredData.forEach((item) => {\n            const regex = new RegExp(this.value, 'gi')\n            const response = item.replace(regex, (str) => {\n                return (\n                    \"<span style='background-color: yellow;'>\" + str + '</span>'\n                )\n            })\n            list = list + `<li role=\"option\">${response}</li>`\n        })\n\n        // append list to the screen\n        this.list.innerHTML = list\n\n        // now that list is on DOM add event listeners\n        const listItems = [...this.list.querySelectorAll('li')]\n        listItems.forEach((item) => {\n            item.addEventListener('click', () => {\n                this.setInput(item.textContent)\n                this.closeModal()\n            })\n        })\n    }\n\n    ////////////////////////////////////////////////////\n    // visually set input value (optionally triggered)\n    ////////////////////////////////////////////////////\n    setInput(textValue) {\n        this.$input.value = textValue\n    }\n\n    ////////////////////////////////////////////////////\n    // public triggers - USERS SHOULD ONLY USE THESE\n    ////////////////////////////////////////////////////\n    triggerClose() {\n        this.closeModal()\n    }\n\n    triggerDisable() {\n        this.isDisabled = true\n        this.closeModal()\n        this.dispatch('disabled', {\n            input: this.$input,\n            modal: this.modal,\n            floatsam: this,\n            options: this.options,\n        })\n    }\n\n    triggerEnable() {\n        this.isDisabled = false\n    }\n\n    ////////////////////////////////////////////////////\n    // utils\n    ////////////////////////////////////////////////////\n    minCharsExcceded() {\n        if (this.value.length >= this.minChars) {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    ////////////////////////////////////////////////////\n    // init fn - run on singleton creation\n    ////////////////////////////////////////////////////\n    init() {\n        this._self = this\n        this.currentSelected = null\n        this.isDisabled = false\n\n        this.setUp()\n        // inject the modal onto the page and get an instance of it\n        this.initModal()\n\n        // add listener to onInput of input\n        this.initInputCheck()\n\n        console.log('we are in dev mode')\n\n        this.dispatch('init', {\n            input: this.$input,\n            modal: this.modal,\n            floatsam: this,\n            options: this.options,\n        })\n    }\n}\n\nexport default floatsam\n"],"names":["DispatcherEvent","eventName","this","callbacks","floatsam","registerCallback","callback","push","unregisterCallback","index","indexOf","splice","fire","data","slice","forEach","options","events","$input","el","minChars","isOpen","isListEmpty","isFocused","inputPreview","onAjax","init","dispatch","event","on","off","length","setUp","setAttribute","initModal","insertAdjacentHTML","modal","document","querySelector","list","style","pointerEvents","visibility","initInputCheck","_this","isDisabled","addEventListener","e","value","target","input","then","result","update","closeModal","console","log","generateListItems","openModal","_proto2","preventSubmit","preventDefault","checkKey","bind","classList","add","OPEN_CLASS","innerHTML","currentSelected","removeEventListener","remove","focus","keyCode","selectPrev","selectNext","closest","submit","selectItem","_this2","concat","querySelectorAll","items","item","setInput","textContent","selected","_this3","filter","toLowerCase","includes","regex","RegExp","response","replace","str","warn","textValue","triggerClose","triggerDisable","triggerEnable","minCharsExcceded","_self"],"mappings":"sOAAA,MAWmB,UAGEA,eAAA,WACjB,WAAYC,GACRC,KAAKD,UAAYA,EACjBC,KAAKC,UAAY,EACrB,CAAC,kBAqBCC,SAnBFC,iBAAA,SAAiBC,GACbJ,KAAKC,UAAUI,KAAKD,EACxB,IAEAE,mBAAA,SAAmBF,GACf,IAAMG,EAAQP,KAAKC,UAAUO,QAAQJ,GACjCG,GAAS,GACTP,KAAKC,UAAUQ,OAAOF,EAAO,EAErC,IAEAG,KAAA,SAAKC,GACiBX,KAAKC,UAAUW,MAAM,GAC7BC,QAAQ,SAACT,GACfA,EAASO,EACb,EACJ,EAGET,CAAAA,CAzBe;OA6BjB,WAAA,SAAAA,EAAYY,GACRd,KAAKe,OAAS,CAAA,EAGdf,KAAKc,QAAUA,EAEfd,KAAKgB,OAASF,EAAQG,GACtBjB,KAAKW,OAAOG,EAAQH,MAAOG,EAAQH,KACnCX,KAAKkB,SAAWJ,EAAQI,SAAWJ,EAAQI,SAAW,EACtDlB,KAAKmB,QAAS,EACdnB,KAAKoB,aAAc,EACnBpB,KAAKqB,WAAY,EACjBrB,KAAKsB,cAAe,EACpBtB,KAAKuB,OAAST,EAAQS,OACtBvB,KAAKwB,MACT,CAAC,IAKDC,EAAAA,EAAAA,UA0VJ,OA1VIA,EAAAA,SAAA,SAAS1B,EAAWY,GAChB,IAAWe,EAAG1B,KAAKe,OAAOhB,GACtB2B,GACAA,EAAMhB,KAAKC,EAEnB,EAEAgB,EAAAA,GAAA,SAAG5B,EAAWK,GACV,IAASsB,EAAG1B,KAAKe,OAAOhB,GACnB2B,IACDA,EAAQ,IAAmB5B,EAACC,GAC5BC,KAAKe,OAAOhB,GAAa2B,GAE7BA,EAAMvB,iBAAiBC,EAC3B,EAEAwB,EAAAA,IAAA,SAAI7B,EAAWK,GACX,IAAWsB,EAAG1B,KAAKe,OAAOhB,GACtB2B,GAASA,EAAMzB,UAAUO,QAAQJ,IAAa,IAC9CsB,EAAMpB,mBAAmBF,GACM,IAA3BsB,EAAMzB,UAAU4B,eACL7B,KAACe,OAAOhB,GAG/B,IAOA+B,MAAA,WAEI9B,KAAKgB,OAAOe,aAAa,eAAgB,MAC7C,EAEAC,EAAAA,UAAA,WAEIhC,KAAKgB,OAAOiB,mBAAmB,WApGnC,qPAuGIjC,KAAKkC,MAAQC,SAASC,cAAc,uBACpCpC,KAAKqC,KAAOrC,KAAKkC,MAAME,cAAc,6BAGrCpC,KAAKkC,MAAMI,MAAMC,cAAgB,OACjCvC,KAAKkC,MAAMI,MAAME,WAAa,QAClC,EAEAC,EAAAA,eAAA,WAAiB,IAAAC,EAAA1C,KAGTA,KAAK2C,YAIL3C,KAAKgB,OAAO4B,iBAAiB,QAD7B5C,KAAKuB,OACiC,SAACsB,GACnCH,EAAKI,MAAQD,EAAEE,OAAOD,MAElBJ,EAAKI,MAAMjB,QAAUa,EAAKxB,UAC1BwB,EAAKjB,SAAS,cAAe,CACzBuB,MAAON,EAAK1B,OACZkB,MAAOQ,EAAKR,MACZhC,SAAUwC,EACV5B,QAAS4B,EAAK5B,UAElB4B,EAAKnB,OAAOmB,EAAKI,OAAOG,KAAK,SAACC,GAC1BR,EAAK/B,KAAOuC,EAEZR,EAAKjB,SAAS,aAAc,CACxBuB,MAAON,EAAK1B,OACZkB,MAAOQ,EAAKR,MACZhC,SAAUwC,EACV5B,QAAS4B,EAAK5B,UAGlB4B,EAAKS,QACT,IAEAT,EAAKU,YAEb,EAEsC,SAACP,GACnCH,EAAKI,MAAQD,EAAEE,OAAOD,MAClBJ,EAAKI,MAAMjB,QAAUa,EAAKxB,UAC1BwB,EAAKS,QAEb,EAER,EAEAA,EAAAA,OAAA,WAKQnD,KAAKW,MACL0C,QAAQC,IAAItD,KAAK8C,OACjB9C,KAAKuD,qBAGe,IAAhBvD,KAAKmB,QACLnB,KAAKwD,aAGTxD,KAAKoD,YAEb,EAACK,EAEDC,cAAA,SAAcb,GACVA,EAAEc,gBACN,EAOAH,EAAAA,UAAA,WACQxD,KAAK2C,aAETR,SAASS,iBAAiB,SAAU5C,KAAK0D,eACzCL,QAAQC,IAAI,kBACZtD,KAAK4D,SAAW5D,KAAK4D,SAASC,KAAK7D,MACnCmC,SAASS,iBAAiB,UAAW5C,KAAK4D,UAAU,GAGpD5D,KAAKkC,MAAMI,MAAMC,cAAgB,OACjCvC,KAAKkC,MAAMI,MAAME,WAAa,UAC9BxC,KAAKgB,OAAO8C,UAAUC,IAAIC,GAE1BhE,KAAKmB,QAAS,EAEdnB,KAAKyB,SAAS,YAAa,CACvBuB,MAAOhD,KAAKgB,OACZkB,MAAOlC,KAAKkC,MACZhC,SAAUF,KACVc,QAASd,KAAKc,UAEtB,EAAC2C,EAEDL,WAAA,WACIC,QAAQC,IAAI,cACZtD,KAAKqC,KAAK4B,UAAY,GACtBjE,KAAKkE,gBAAkB,KACnBlE,KAAKmB,SACLgB,SAASgC,oBAAoB,SAAUnE,KAAK0D,eAC5CL,QAAQC,IAAI,oBACZnB,SAASgC,oBAAoB,UAAWnE,KAAK4D,UAAU,IAG3D5D,KAAKkC,MAAMI,MAAMC,cAAgB,OACjCvC,KAAKkC,MAAMI,MAAME,WAAa,SAC9BxC,KAAKgB,OAAO8C,UAAUM,OAAOJ,GAC7BhE,KAAKgB,OAAOqD,QAEZrE,KAAKmB,QAAS,EAEdnB,KAAKyB,SAAS,aAAc,CACxBuB,MAAOhD,KAAKgB,OACZkB,MAAOlC,KAAKkC,MACZhC,SAAUF,KACVc,QAASd,KAAKc,SAEtB,EAAC2C,EAKDG,SAAA,SAASf,GACY,MAAbA,EAAEyB,QAEFtE,KAAKuE,aACe,MAAb1B,EAAEyB,QAETtE,KAAKwE,aACe,MAAb3B,EAAEyB,SAEW,MAAbzB,EAAEyB,UAEW,MAAbzB,EAAEyB,SAIW,KAAbzB,EAAEyB,SAFTzB,EAAEc,iBACF3D,KAAKoD,cAKe,MAAbP,EAAEyB,UAETzB,EAAEc,iBACF3D,KAAKoD,aACLpD,KAAKgB,OAAOyD,QAAQ,QAAQC,UAEpC,IAKAC,WAAA,WACI,IAAAC,EAAA5E,OAAkB,GAAA6E,OAAA7E,KAAKqC,KAAKyC,iBAAiB,OAC7CzB,QAAQC,IAAItD,KAAKkE,iBACjBa,EAAMlE,QAAQ,SAACmE,EAAMzE,GACbA,IAAUqE,EAAKV,iBACfc,EAAKlB,UAAUC,IAAI,iBACfa,EAAKtD,cACLsD,EAAKK,SAASD,EAAKE,aAIvBN,EAAKnD,SAAS,YAAa,CACvB0D,SAAUH,EAAKE,YACflC,MAAO4B,EAAK5D,OACZkB,MAAO0C,EAAK1C,MACZhC,SAAU0E,EACV9D,QAAS8D,EAAK9D,WAGlBkE,EAAKlB,UAAUM,OAAO,gBAE9B,EACJ,EAACX,EAEDe,WAAA,WAEQxE,KAAKkE,gBADoB,OAAzBlE,KAAKkE,gBACkB,EAEAlE,KAAKkE,gBAAkB,EAElDlE,KAAK2E,YACT,IAEAJ,WAAA,WACIvE,KAAKkE,gBAAkBlE,KAAKkE,gBAAkB,EAC9ClE,KAAK2E,YACT,EAMApB,EAAAA,kBAAA,WAAoB,IAAA6B,EAAApF,KACRqC,EAAA,GAEHrC,KAAKW,MAKWX,KAAKW,KAAK0E,OAAO,SAACL,GAEnC,GADA3B,QAAQC,IAAI8B,EAAKtC,OACbkC,EAAKM,cAAcC,SAASH,EAAKtC,MAAMwC,eACvC,QAER,GAEazE,QAAQ,SAACmE,GAClB,IAAMQ,EAAQ,IAAIC,OAAOL,EAAKtC,MAAO,MAC/B4C,EAAWV,EAAKW,QAAQH,EAAO,SAACI,GAClC,MACI,2CAA6CA,EAAM,SAE3D,GACAvD,EAAOA,EAA4BqD,qBAAAA,SACvC,GAGA1F,KAAKqC,KAAK4B,UAAY5B,EAGP,GAAAwC,OAAO7E,KAAKqC,KAAKyC,iBAAiB,OACvCjE,QAAQ,SAACmE,GACfA,EAAKpC,iBAAiB,QAAS,WAC3BwC,EAAKH,SAASD,EAAKE,aACnBE,EAAKhC,YACT,EACJ,IA/BIC,QAAQwC,KAAK,aAAc7F,KAAK8C,MAgCxC,EAACW,EAKDwB,SAAA,SAASa,GACL9F,KAAKgB,OAAO8B,MAAQgD,CACxB,EAKAC,EAAAA,aAAA,WACI/F,KAAKoD,YACT,EAACK,EAEDuC,eAAA,WACIhG,KAAK2C,YAAa,EAClB3C,KAAKoD,aACLpD,KAAKyB,SAAS,WAAY,CACtBuB,MAAOhD,KAAKgB,OACZkB,MAAOlC,KAAKkC,MACZhC,SAAUF,KACVc,QAASd,KAAKc,SAEtB,EAEAmF,EAAAA,cAAA,WACIjG,KAAK2C,YAAa,CACtB,EAKAuD,EAAAA,iBAAA,WACI,OAAIlG,KAAK8C,MAAMjB,QAAU7B,KAAKkB,QAKlC,EAACuC,EAKDjC,KAAA,WACIxB,KAAKmG,MAAQnG,KACbA,KAAKkE,gBAAkB,KACvBlE,KAAK2C,YAAa,EAElB3C,KAAK8B,QAEL9B,KAAKgC,YAGLhC,KAAKyC,iBAELY,QAAQC,IAAI,sBAEZtD,KAAKyB,SAAS,OAAQ,CAClBuB,MAAOhD,KAAKgB,OACZkB,MAAOlC,KAAKkC,MACZhC,SAAUF,KACVc,QAASd,KAAKc,SAEtB,EAGJZ,CAAA,CA9WI"}