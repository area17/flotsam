{"version":3,"file":"flotsam.umd.js","sources":["../src/DispatcherEvent.js","../src/index.js","../src/EventComponent.js"],"sourcesContent":["// helper class to run event busing\nclass DispatcherEvent {\n    constructor(eventName) {\n        this.eventName = eventName\n        this.callbacks = []\n    }\n\n    registerCallback(callback) {\n        this.callbacks.push(callback)\n    }\n\n    unregisterCallback(callback) {\n        const index = this.callbacks.indexOf(callback)\n        if (index > -1) {\n            this.callbacks.splice(index, 1)\n        }\n    }\n\n    fire(data) {\n        const callbacks = this.callbacks.slice(0)\n        callbacks.forEach((callback) => {\n            callback(data)\n        })\n    }\n}\n\nexport default DispatcherEvent\n","import EventComponent from './EventComponent'\n\nconst OPEN_CLASS = 'flotsam-modal--is-open'\n\n// defaults\nconst hintDefault = `When autocomplete results are available, use up and down arrows to review and enter to select. Touch device users, explore by touch or with swipe gestures.`\nconst emptyDefault = `Sorry there are no results for ::term:: please search again.`\n\nclass flotsam extends EventComponent {\n    ////////////////////////////////////////////////////\n    // construct\n    ////////////////////////////////////////////////////\n    constructor(options) {\n        // class inheritance setup\n        // adding core events module\n        super()\n\n        // for debugging view the options\n        this.options = options\n\n        // el reference\n        this.$input = options.el\n\n        // static data array\n        this.data = options.data ? options.data : null\n\n        // minimum characters required to use ajax/show autocomplete\n        this.minChars = options.minChars ? options.minChars : 2\n\n        // interaction of setting input value on arrow key\n        this.inputPreview =\n            typeof options.inputPreview === 'boolean'\n                ? options.inputPreview\n                : true\n\n        // promise style fn to get data\n        this.getData =\n            typeof options.getData === 'function' ? options.getData : null\n\n        // to add span attributes around string value of selected chars\n        this.markResults =\n            typeof options.markResults === 'boolean'\n                ? options.markResults\n                : true\n\n        // disable the instant submission on pressing enter to select listbox value\n        this.submitOnReturn =\n            typeof options.submitOnReturn === 'boolean'\n                ? options.submitOnReturn\n                : true\n\n        // description of autocomplete functionality\n        this.hint = options.hint ? options.hint : hintDefault\n\n        // empty state visual content\n        this.noResultsText = options.noResultsText\n            ? options.noResultsText\n            : emptyDefault\n\n        // modal can have an empty state (currently only true)\n        this.hasEmptyState = true\n\n        // native flotsom state\n        this.filteredData = []\n        this.isOpen = false\n        this.currentSelected = null\n        this.isDisabled = false\n\n        // init the project!\n        this.init()\n    }\n\n    ////////////////////////////////////////////////////\n    // inits\n    ////////////////////////////////////////////////////\n\n    // setup has some housekeeping of inputs and attrs to increase quality of life\n    setUp() {\n        // add autocomplete off to input to not get in the way of dropdown\n        this.$input.setAttribute('autocomplete', 'off')\n        this.$input.setAttribute('aria-expanded', 'false')\n        this.$input.setAttribute('aria-haspopup', 'listbox')\n        this.$input.setAttribute('role', 'combobox')\n        this.$input.setAttribute('aria-autocomplete', 'list')\n        this.$input.setAttribute('aria-owns', `modal-${this.uid}-list`)\n        this.$input.id = `flotsam-input-${this.uid}`\n        this.$input.setAttribute(\n            'aria-describedby',\n            `assistiveHint-${this.uid}`\n        )\n    }\n\n    initModal() {\n        // append modal to the page\n        this.$input.insertAdjacentHTML('afterend', this.generateModal())\n        this.$input.insertAdjacentHTML('afterend', this.generateAssistiveHint())\n        this.$input.insertAdjacentHTML('afterend', this.generateStatus())\n\n        // grab an instance of elems to use later\n        this.$modal = document.querySelector(`#modal-${this.uid}`)\n        this.$status = document.querySelector(`#status-${this.uid}`)\n\n        setTimeout(() => {\n            this.list = this.$modal.querySelector('.flotsam-modal__list')\n            this.$empty = this.$modal.querySelector('.flotsam-modal__empty')\n            // intial modal styles\n            this.$modal.style.pointerEvents = 'none'\n            this.$modal.style.visibility = 'hidden'\n        }, 0)\n    }\n\n    initInputCheck() {\n        if (this.isDisabled) return\n\n        // if we want to use ajax (or some other method of returning a promise) we build a promise to get data\n        if (this.getData) {\n            this.$input.addEventListener('input', (e) => {\n                this.value = e.target.value\n\n                if (this.minCharsExcceded()) {\n                    super.dispatch('loadingData', {\n                        input: this.$input,\n                        modal: this.$modal,\n                    })\n\n                    this.getData(this.value).then((result) => {\n                        this.filteredData = result\n\n                        super.dispatch('loadedData', {\n                            input: this.$input,\n                            modal: this.$modal,\n                        })\n\n                        this.update(true)\n                    })\n                } else if (this.isOpen) {\n                    this.closeModal()\n                }\n            })\n        } else {\n            // else if we have static data lets just use that\n            this.$input.addEventListener('input', (e) => {\n                this.value = e.target.value\n                if (this.minCharsExcceded()) {\n                    this.update(false)\n                } else if (this.isOpen) {\n                    this.closeModal()\n                }\n            })\n        }\n    }\n\n    ////////////////////////////////////////////////////\n    // init assisitve hint\n    ////////////////////////////////////////////////////\n\n    generateAssistiveHint() {\n        return `\n            <div id=\"assistiveHint-${this.uid}\" class=\"flotsam-modal__hint\">\n                ${this.hint}\n            </div>\n        `\n    }\n\n    generateStatus() {\n        return `\n            <div id=\"status-${this.uid}\" aria-role='status' aria-live=\"polite\" class=\"flotsam-modal__status\">\n            </div>\n        `\n    }\n\n    update(dynamic) {\n        if (!dynamic) {\n            // filter the data\n            if (this.data && this.data.length !== 0) {\n                this.filteredData = [...this.data].filter((item) => {\n                    if (item.toLowerCase().includes(this.value.toLowerCase())) {\n                        return item\n                    }\n                })\n            } else {\n                this.filteredData = []\n            }\n        }\n\n        if (this.filteredData.length === 0) {\n            this.showEmptyState()\n        } else {\n            // we have items remove the empty state\n            this.hideEmptyState()\n            this.generateListItems()\n\n            // this only triggers once then sets the modal to open state\n            if (this.isOpen === false) {\n                this.openModal()\n            }\n        }\n    }\n\n    preventSubmit(e) {\n        e.preventDefault()\n    }\n\n    showEmptyState() {\n        this.removeListItems()\n\n        // replace fn for ::term:: in empty string with value\n        const str = this.noResultsText.replace(\n            '::term::',\n            `<strong>\"${this.value}\"</strong>`\n        )\n        const emptyHtml = `<div>${str}</div>`\n        this.$empty.innerHTML = emptyHtml\n        this.$empty.style.display = 'block'\n\n        if (!this.isOpen) {\n            this.openModal()\n        }\n    }\n\n    hideEmptyState() {\n        this.$empty.innerHTML = ''\n        this.$empty.style.display = 'none'\n    }\n\n    ////////////////////////////////////////////////////\n    // hide and show modal\n    // bread and butter functions all event setup\n    // and breakdown here\n    ////////////////////////////////////////////////////\n    openModal() {\n        if (this.isDisabled) return\n\n        document.addEventListener('submit', this.preventSubmit)\n\n        // this way lets us cleanly breakdown this event listener later\n        this.checkKey = this.checkKey.bind(this)\n        document.addEventListener('keydown', this.checkKey, true)\n        this.isOpen = true\n\n        // styles and classes\n        this.$modal.style.pointerEvents = 'auto'\n        this.$modal.style.visibility = 'visible'\n        this.$input.classList.add(OPEN_CLASS)\n        this.$input.setAttribute('aria-expanded', 'true')\n\n        super.dispatch('openModal', {\n            input: this.$input,\n            modal: this.$modal,\n        })\n    }\n\n    closeModal() {\n        // clean up the modal containers\n        this.hideEmptyState()\n        this.removeListItems()\n        this.unsetSelected()\n\n        if (this.isOpen) {\n            document.removeEventListener('submit', this.preventSubmit)\n            document.removeEventListener('keydown', this.checkKey, true)\n        }\n\n        this.$modal.style.pointerEvents = 'none'\n        this.$modal.style.visibility = 'hidden'\n        this.$input.classList.remove(OPEN_CLASS)\n        this.$input.focus()\n\n        this.isOpen = false\n\n        super.dispatch('closeModal', {\n            input: this.$input,\n            modal: this.$modal,\n        })\n    }\n    ////////////////////////////////////////////////////\n    // key event checker - the key event triggers\n    ////////////////////////////////////////////////////\n\n    checkKey(e) {\n        if (e.keyCode == '38') {\n            // up arrowspot\n            this.selectPrev()\n        } else if (e.keyCode == '40') {\n            // down arrow\n            this.selectNext()\n        } else if (e.keyCode == '37') {\n            // left arrow\n        } else if (e.keyCode == '39') {\n            // right arrow\n        } else if (e.keyCode == '27') {\n            // escape\n            e.preventDefault()\n            this.closeModal()\n        } else if (e.keyCode == '9') {\n            // tab\n            e.preventDefault()\n            this.closeModal()\n        } else if (e.keyCode == '13') {\n            // enter\n            e.preventDefault()\n            this.resultClicked(this.currentSelected)\n            this.closeModal()\n            if (this.submitOnReturn) {\n                this.$input.closest('form').submit()\n            }\n        }\n    }\n\n    ////////////////////////////////////////////////////\n    // visual selection of the items on the modal\n    ////////////////////////////////////////////////////\n    selectItem() {\n        const items = [...this.list.querySelectorAll('li')]\n        items.forEach((item, index) => {\n            if (index === this.currentSelected) {\n                item.classList.add('flotsam-modal__selected-item')\n\n                // a11y features\n                item.setAttribute('aria-selected', 'true')\n                this.$input.setAttribute('aria-activedescendant', item.id)\n\n                // if prevew is on show the selected in the input box\n                if (this.inputPreview) {\n                    this.setInput(item.innerText)\n                }\n\n                super.dispatch('selectKey', {\n                    selected: item.textContent.trim(),\n                    value: this.value,\n                    input: this.$input,\n                    modal: this.$modal,\n                })\n\n                this.scrollItemIntoView(item)\n            } else {\n                item.classList.remove('flotsam-modal__selected-item')\n                item.setAttribute('aria-selected', 'false')\n            }\n        })\n    }\n\n    scrollItemIntoView(item) {\n        item.scrollIntoView({\n            block: 'nearest',\n            inline: 'start',\n        })\n    }\n\n    selectNext() {\n        if (this.currentSelected === null) {\n            this.currentSelected = 0\n        } else {\n            this.currentSelected = this.currentSelected + 1\n        }\n\n        this.selectItem()\n    }\n\n    selectPrev() {\n        this.currentSelected = this.currentSelected - 1\n        this.selectItem()\n    }\n\n    unsetSelected() {\n        // unset selected\n        this.currentSelected = null\n        const items = [...this.list.querySelectorAll('li')]\n\n        // a11y feature\n        this.$input.removeAttribute('aria-activedescendant')\n\n        items.forEach((item) => {\n            item.classList.remove('flotsam-modal__selected-item')\n        })\n    }\n\n    generateModal() {\n        return `\n        <div class=\"flotsam-modal\" id=\"modal-${this.uid}\" >\n            <div class=\"flotsam-modal__inner\">\n                <ul\n                    class=\"flotsam-modal__list\"\n                    role=\"listbox\"\n                    id=\"modal-${this.uid}-list\">\n                </ul>\n                <div class=\"flotsam-modal__empty\" style=\"display: none\"></div>\n            </div>\n        </div>\n    `\n    }\n\n    generateListItems() {\n        // clean up the dropdown of selects\n        this.unsetSelected()\n\n        let list = ``\n\n        this.filteredData.forEach((item, index) => {\n            let response = item\n            if (this.markResults) {\n                const regex = new RegExp(this.value, 'gi')\n                response = item.replace(regex, (str) => {\n                    return `<mark>` + str + '</mark>'\n                })\n            }\n            const posIndex = index + 1\n            list += `\n                <li class=\"flotsam-modal__list-item\" role=\"option\" aria-posinset=\"${posIndex}\" aria-setsize=\"${this.filteredData.length}\" aria-selected=\"false\" id=\"list-item-${index}--${this.uid}\" tab-index=\"-1\">\n                    ${response}\n                </li>`\n        })\n\n        // append list to the screen\n        this.list.innerHTML = list\n\n        // now that list is on DOM add event listeners\n        const listItems = [...this.list.querySelectorAll('li')]\n        listItems.forEach((item, index) => {\n            item.addEventListener('click', () => {\n                this.resultClicked(index)\n                this.closeModal()\n            })\n        })\n    }\n\n    // quick way to break down list\n    removeListItems() {\n        this.list.innerHTML = ''\n    }\n\n    ////////////////////////////////////////////////////\n    // result clicked\n    ////////////////////////////////////////////////////\n    resultClicked(index) {\n        if (index) {\n            const item = this.list.querySelectorAll('li')[index]\n            if (item) {\n                super.dispatch('resultClicked', {\n                    selected: item.textContent.trim(),\n                    value: this.value,\n                    input: this.$input,\n                    modal: this.$modal,\n                })\n                this.setInput(item.innerText)\n            }\n        }\n    }\n\n    ////////////////////////////////////////////////////\n    // visually set input value (optionally triggered)\n    ////////////////////////////////////////////////////\n    setInput(textValue) {\n        this.$input.value = textValue\n    }\n\n    ////////////////////////////////////////////////////\n    // public triggers - USERS SHOULD ONLY USE THESE\n    ////////////////////////////////////////////////////\n    triggerClose() {\n        this.closeModal()\n    }\n\n    triggerDisable() {\n        this.isDisabled = true\n        this.closeModal()\n        super.dispatch('disabled', {\n            input: this.$input,\n            modal: this.$modal,\n        })\n    }\n\n    triggerEnable() {\n        this.isDisabled = false\n    }\n\n    ////////////////////////////////////////////////////\n    // utils\n    ////////////////////////////////////////////////////\n    minCharsExcceded() {\n        if (this.value.length >= this.minChars) {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    ////////////////////////////////////////////////////\n    // init fn - run on singleton creation\n    ////////////////////////////////////////////////////\n    init() {\n        if (!this.data && !this.getData) {\n            this.isDisabled = true\n            console.error('flotsam: no data specified', this)\n            return\n        }\n\n        this.setUp()\n\n        // inject the modal onto the page and get an instance of it\n        this.initModal()\n\n        // add listener to onInput of input\n        this.initInputCheck()\n\n        // bug not triggering right away, so set it to next cycle\n        setTimeout(() => {\n            super.dispatch('init', {\n                input: this.$input,\n                modal: this.$modal,\n            })\n        }, 0)\n    }\n}\n\nexport default flotsam\n","import DispatcherEvent from './DispatcherEvent'\n\nclass EventComponent {\n    ////////////////////////////////////////////////////\n    // construct\n    ////////////////////////////////////////////////////\n    constructor() {\n        this.events = {}\n        this.uid = Math.floor(1000 + Math.random() * 90000)\n    }\n\n    ////////////////////////////////////////////////////\n    // event trigger and listeners\n    ////////////////////////////////////////////////////\n    dispatch(eventName, data) {\n        const event = this.events[eventName]\n        if (event) {\n            event.fire(data)\n        }\n    }\n\n    on(eventName, callback) {\n        let event = this.events[eventName]\n        if (!event) {\n            event = new DispatcherEvent(eventName)\n            this.events[eventName] = event\n        }\n        event.registerCallback(callback)\n    }\n\n    off(eventName, callback) {\n        const event = this.events[eventName]\n        if (event && event.callbacks.indexOf(callback) > -1) {\n            event.unregisterCallback(callback)\n            if (event.callbacks.length === 0) {\n                delete this.events[eventName]\n            }\n        }\n    }\n}\n\nexport default EventComponent\n"],"names":["DispatcherEvent","eventName","this","callbacks","_proto","prototype","registerCallback","callback","push","unregisterCallback","index","indexOf","splice","fire","data","slice","forEach","_EventComponent","options","_this","call","$input","el","minChars","inputPreview","getData","markResults","submitOnReturn","hint","noResultsText","hasEmptyState","filteredData","isOpen","currentSelected","isDisabled","init","flotsam","EventComponent","setUp","setAttribute","uid","id","initModal","_this2","insertAdjacentHTML","generateModal","generateAssistiveHint","generateStatus","$modal","document","querySelector","$status","setTimeout","list","$empty","style","pointerEvents","visibility","initInputCheck","_this3","addEventListener","e","value","target","minCharsExcceded","dispatch","input","modal","then","result","update","closeModal","dynamic","_this4","length","concat","filter","item","toLowerCase","includes","showEmptyState","hideEmptyState","generateListItems","openModal","preventSubmit","preventDefault","removeListItems","str","replace","innerHTML","display","checkKey","bind","classList","add","OPEN_CLASS","unsetSelected","removeEventListener","remove","focus","keyCode","selectPrev","selectNext","resultClicked","closest","submit","selectItem","_this5","querySelectorAll","setInput","innerText","selected","textContent","trim","scrollItemIntoView","scrollIntoView","block","inline","items","removeAttribute","_this6","response","regex","RegExp","posIndex","textValue","triggerClose","triggerDisable","triggerEnable","_this7","console","error","events","Math","floor","random","event","on","off"],"mappings":"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"}